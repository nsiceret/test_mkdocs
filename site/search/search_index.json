{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours de NSI ! \u2693\ufe0e bient\u00f4t ici NSI en premi\u00e8re \u2693\ufe0e lien NSI en terminale \u2693\ufe0e lien Section euro ? \u2693\ufe0e ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder","title":"\ud83c\udfe1 Accueil"},{"location":"#cours-de-nsi","text":"bient\u00f4t ici","title":"Cours de NSI !"},{"location":"#nsi-en-premiere","text":"lien","title":"NSI en premi\u00e8re"},{"location":"#nsi-en-terminale","text":"lien","title":"NSI en terminale"},{"location":"#section-euro","text":"### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder","title":"Section euro ?"},{"location":"1NSI/","text":"NSI en premi\u00e8re \u2693\ufe0e 01. Bases de la programmation \u2693\ufe0e Pour cette partie, nous utiliserons des jeux interactifs pour apprendre ou revoir les bases de la programmation en Python. Sur le site de France-IOI votre mission sera d'aider des extraterrestres gr\u00e2ce \u00e0 votre robot. Les explications pour cr\u00e9er un compte seront donn\u00e9es en classe. Le site Py-rates est un autre site d'apprentissage de programmation, mais cette fois-ci le jeu consiste \u00e0 aider des pirates. 02. Architecture d'un ordinateur \u2693\ufe0e Qu'est-ce qu'un ordinateur ? Quel est le d\u00e9roulement d'un programme en langage machine ? Rendez-vous sur la page d\u00e9di\u00e9e","title":"Premi\u00e8re NSI"},{"location":"1NSI/#nsi-en-premiere","text":"","title":"NSI en premi\u00e8re"},{"location":"1NSI/#01-bases-de-la-programmation","text":"Pour cette partie, nous utiliserons des jeux interactifs pour apprendre ou revoir les bases de la programmation en Python. Sur le site de France-IOI votre mission sera d'aider des extraterrestres gr\u00e2ce \u00e0 votre robot. Les explications pour cr\u00e9er un compte seront donn\u00e9es en classe. Le site Py-rates est un autre site d'apprentissage de programmation, mais cette fois-ci le jeu consiste \u00e0 aider des pirates.","title":"01. Bases de la programmation"},{"location":"1NSI/#02-architecture-dun-ordinateur","text":"Qu'est-ce qu'un ordinateur ? Quel est le d\u00e9roulement d'un programme en langage machine ? Rendez-vous sur la page d\u00e9di\u00e9e","title":"02. Architecture d'un ordinateur"},{"location":"1NSI/02ArchitectureOrdinateur/","text":"Architecture d'un ordinateur \u2693\ufe0e Le mod\u00e8le de von Neumann \u2693\ufe0e Presque tous les ordinateurs fonctionnent selon le m\u00eame mod\u00e8le, appel\u00e9 mod\u00e8le de von Neumann . \u00c0 faire dans ce chapitre : des activit\u00e9s Capytale bas\u00e9es sur des vid\u00e9os ou des recherches. Ordinateur, tout un programme , C'est pas Sorcier How Computers Work: CPU, Memory, Input and Ouput , Code.org Le binaire Le langage machine \u2693\ufe0e Pour cette partie, nous utiliserons un simulateur en ligne d'ordinateur appel\u00e9 VIC ( VIsual Computer ). VIC en ligne Les explications sur son fonctionnement Quelques petits programmes \u00e0 programmer vous-m\u00eame dans VIC. \u00e0 faire : lire deux nombres et afficher leur somme ; lire trois nombres et afficher leur somme ; lire deux nombres et afficher le plus grand des deux ; lire une liste de nombres se terminant par un 0 et calculer leur somme ; une boucle infinie ; calculer et afficher la liste des nombres entiers naturels : 0, 1, 2 etc. jusqu'\u00e0 ce que l'utilisateur appuie sur le bouton Stop.","title":"Architecture d'un ordinateur"},{"location":"1NSI/02ArchitectureOrdinateur/#architecture-dun-ordinateur","text":"","title":"Architecture d'un ordinateur"},{"location":"1NSI/02ArchitectureOrdinateur/#le-modele-de-von-neumann","text":"Presque tous les ordinateurs fonctionnent selon le m\u00eame mod\u00e8le, appel\u00e9 mod\u00e8le de von Neumann . \u00c0 faire dans ce chapitre : des activit\u00e9s Capytale bas\u00e9es sur des vid\u00e9os ou des recherches. Ordinateur, tout un programme , C'est pas Sorcier How Computers Work: CPU, Memory, Input and Ouput , Code.org Le binaire","title":"Le mod\u00e8le de von Neumann"},{"location":"1NSI/02ArchitectureOrdinateur/#le-langage-machine","text":"Pour cette partie, nous utiliserons un simulateur en ligne d'ordinateur appel\u00e9 VIC ( VIsual Computer ). VIC en ligne Les explications sur son fonctionnement Quelques petits programmes \u00e0 programmer vous-m\u00eame dans VIC. \u00e0 faire : lire deux nombres et afficher leur somme ; lire trois nombres et afficher leur somme ; lire deux nombres et afficher le plus grand des deux ; lire une liste de nombres se terminant par un 0 et calculer leur somme ; une boucle infinie ; calculer et afficher la liste des nombres entiers naturels : 0, 1, 2 etc. jusqu'\u00e0 ce que l'utilisateur appuie sur le bouton Stop.","title":"Le langage machine"},{"location":"1NSI/02ExplicationsVIC/","text":"Comment utiliser VIC \u2693\ufe0e VIC (Visual Computer) est un ordinateur minimal utilisable en ligne pour simuler le langage machine . Il comporte tr\u00e8s peu de composants et ne comprend qu'un nombre tr\u00e8s r\u00e9duit d'instructions. Cette simplification permet de comprendre le mod\u00e8le de von Neumann et les bases du langage machine . Dans VIC , toutes les donn\u00e9es sont des nombres entiers \u00e0 trois chiffres (de -999 \u00e0 999). Architecture \u2693\ufe0e L'interface de VIC est compos\u00e9e de trois parties, elles-m\u00eames partag\u00e9es en plusieurs composants : les composants d'entr\u00e9e/sortie ( I/O Units ), avec : un composant d'entr\u00e9e ( Input ) duquel on peut LIRE ; un composant de sortie ( Output ) dans lequel on peut \u00c9CRIRE ; un processeur ( CPU ), compos\u00e9 de : un registre d'instruction ( Instruction Register ) dans lequel est indiqu\u00e9e la prochaine instruction \u00e0 ex\u00e9cuter ; un registre de donn\u00e9e ( Data Register ) qui contient la donn\u00e9e \u00e0 traiter (VIC ne peut traiter qu'une donn\u00e9e \u00e0 la fois) ; un compteur ordinal ( Program Counter ) qui contient l'adresse en m\u00e9moire de l'instruction \u00e0 ex\u00e9cuter. une m\u00e9moire vive ( Memory ) compos\u00e9e de 100 cases m\u00e9moire ou cellules num\u00e9rot\u00e9es de 00 \u00e0 99. Instructions \u2693\ufe0e Comme les \"vrais\" ordinateurs, VIC ne conna\u00eet qu'un petit nombre d'instructions. Elles sont au nombre de dix. VIC commence son ex\u00e9cution avec l'instructions situ\u00e9e dans la case m\u00e9moire d'adresse 00. \u00c0 chaque \u00e9tape, il ex\u00e9cute l'instruction situ\u00e9e dans la case m\u00e9moire courante puis passe \u00e0 la suvante. Le langage machine \u2693\ufe0e Le langage machine est le langage compris par la machine au niveau des composants. Il s'exprime \u00e0 l'aide de nombres entiers. Pour faciliter le travail des humains, on utilse un langage appel\u00e9 assembleur qui consiste \u00e0 remplacer chaque nombre par une expression plus lisible. Entr\u00e9e-sortie \u2693\ufe0e VIC comprend deux instructions d'entr\u00e9e-sortie : 800 : LIRE la case courante de Input et mettre sa valeur dans le registre de donn\u00e9e 900 : \u00c9CRIRE la valeur du registre de donn\u00e9es dans la case suivante de Output Premier exemple : lire et afficher Un programme qui lit une donn\u00e9e puis l'\u00e9crit dans Ouput . Ce programme s'\u00e9crirait ainsi en assembleur : LIRE \u00c9CRIRE ce qui donne, en langage machine de VIC : 800 900 Essayez ! Si vous \u00e9crivez n'importe quel nombre dans la premi\u00e8ce cellule de Input , ce programme va l'\u00e9crire dans Ouput . Pour que cela fonction, il faut \u00e9crire 800 dans la case m\u00e9moire d'adresse 00 et 900 dans celle d'adresse 01 . Avec la m\u00e9moire \u2693\ufe0e Deux instructions permettent de travailler avec la m\u00e9moire vive : 3xx CHARGER le contenu de la case m\u00e9moire dont l'adresse est xx (o\u00f9 xx repr\u00e9sente deux chiffres) dans le registre de donn\u00e9e depuis 4xx ENREGISTRER le contenu du registre de donn\u00e9e dans la case m\u00e9moire dont l'adresse est xx. Am\u00e9lioration Am\u00e9liorons le programme pr\u00e9c\u00e9dent : on lit un nombre, on l'enregistre dans la case m\u00e9moire 10 puis on l'affiche. En assembleur : LIRE ENREGISTRER dans la case m\u00e9moire 10 \u00c9CRIRE en langage machine de VIC : 800 410 900 Afficher un nombre pr\u00e9cis Il n'est pas possible d'afficher le nombre 42. Pour cela, on peut l'\u00e9crire \u00e0 la main dans une zone m\u00e9moire (par exemple celle dont l'adresse est 02) puis programmer ainsi : CHARGER le contenu de la case 02 \u00c9CRIRE ce qui donne en langage machine les trois lignes suivantes : 310 900 42 Arithm\u00e9tique \u2693\ufe0e VIC ne conna\u00eet que deux op\u00e9rations : addition et soustraction. \u00c0 chaque fois, il travaille avec une case m\u00e9moire d'adresse xx et le registre de donn\u00e9e. 1xx AJOUTE le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9e ; 2xx SOUSTRAIT le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9e. Attention L'ordre des nombres pour la soustraction est important. Addition Pour additionner deux nombres donn\u00e9s en entr\u00e9e, il faudra en enregistrer un en m\u00e9moire, par exemple dans la case 09. LIRE (le premier nombre) ENREGISTRER dans la case m\u00e9moire 09 LIRE (le deuxi\u00e8me) AJOUTER le nombre de la case 09 au registre de donn\u00e9e \u00c9CRIRE en langage machine : 800 410 800 110 900 Contr\u00f4le du flux \u2693\ufe0e Toutes les instructions conditionnelles et les boucles se font en langage machine avec des instructions de contr\u00f4le de flux qui consistent \u00e0 passer, non pas \u00e0 l'instruction suivante, mais \u00e0 ALLER \u00e0 une certaine case m\u00e9moire. La plus simple est : 5xx ALLER ex\u00e9cuter l'instruction situ\u00e9e dans la case m\u00e9moire xx. Boucle infinie Pour ex\u00e9cuter une boucle infinie, on dit \u00e0 VIC d'aller ex\u00e9cuter l'instruction de la case 01. Cette instruction lui dit d'aller \u00e0 la case 00. ALLER \u00e0 la case 01 ALLER \u00e0 la case 00 en langage machine : 501 500 Vous verrez le compteur ordinal ( Program Counter ) alterner entre 0 et 1. Pour arr\u00eater VIC , appuyez sur le bouton en forme de carr\u00e9. Pour faire des tests, VIC poss\u00e8de deux autres instructions de contr\u00f4le de flux : 6xx ALLER_Z\u00c9RO qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9e contient la valeur 0. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. 7xx ALLER_POS qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9e contient une valeur strictement positive. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude.","title":"Comment utiliser *VIC*"},{"location":"1NSI/02ExplicationsVIC/#comment-utiliser-vic","text":"VIC (Visual Computer) est un ordinateur minimal utilisable en ligne pour simuler le langage machine . Il comporte tr\u00e8s peu de composants et ne comprend qu'un nombre tr\u00e8s r\u00e9duit d'instructions. Cette simplification permet de comprendre le mod\u00e8le de von Neumann et les bases du langage machine . Dans VIC , toutes les donn\u00e9es sont des nombres entiers \u00e0 trois chiffres (de -999 \u00e0 999).","title":"Comment utiliser VIC"},{"location":"1NSI/02ExplicationsVIC/#architecture","text":"L'interface de VIC est compos\u00e9e de trois parties, elles-m\u00eames partag\u00e9es en plusieurs composants : les composants d'entr\u00e9e/sortie ( I/O Units ), avec : un composant d'entr\u00e9e ( Input ) duquel on peut LIRE ; un composant de sortie ( Output ) dans lequel on peut \u00c9CRIRE ; un processeur ( CPU ), compos\u00e9 de : un registre d'instruction ( Instruction Register ) dans lequel est indiqu\u00e9e la prochaine instruction \u00e0 ex\u00e9cuter ; un registre de donn\u00e9e ( Data Register ) qui contient la donn\u00e9e \u00e0 traiter (VIC ne peut traiter qu'une donn\u00e9e \u00e0 la fois) ; un compteur ordinal ( Program Counter ) qui contient l'adresse en m\u00e9moire de l'instruction \u00e0 ex\u00e9cuter. une m\u00e9moire vive ( Memory ) compos\u00e9e de 100 cases m\u00e9moire ou cellules num\u00e9rot\u00e9es de 00 \u00e0 99.","title":"Architecture"},{"location":"1NSI/02ExplicationsVIC/#instructions","text":"Comme les \"vrais\" ordinateurs, VIC ne conna\u00eet qu'un petit nombre d'instructions. Elles sont au nombre de dix. VIC commence son ex\u00e9cution avec l'instructions situ\u00e9e dans la case m\u00e9moire d'adresse 00. \u00c0 chaque \u00e9tape, il ex\u00e9cute l'instruction situ\u00e9e dans la case m\u00e9moire courante puis passe \u00e0 la suvante.","title":"Instructions"},{"location":"1NSI/02ExplicationsVIC/#le-langage-machine","text":"Le langage machine est le langage compris par la machine au niveau des composants. Il s'exprime \u00e0 l'aide de nombres entiers. Pour faciliter le travail des humains, on utilse un langage appel\u00e9 assembleur qui consiste \u00e0 remplacer chaque nombre par une expression plus lisible.","title":"Le langage machine"},{"location":"1NSI/02ExplicationsVIC/#entree-sortie","text":"VIC comprend deux instructions d'entr\u00e9e-sortie : 800 : LIRE la case courante de Input et mettre sa valeur dans le registre de donn\u00e9e 900 : \u00c9CRIRE la valeur du registre de donn\u00e9es dans la case suivante de Output Premier exemple : lire et afficher Un programme qui lit une donn\u00e9e puis l'\u00e9crit dans Ouput . Ce programme s'\u00e9crirait ainsi en assembleur : LIRE \u00c9CRIRE ce qui donne, en langage machine de VIC : 800 900 Essayez ! Si vous \u00e9crivez n'importe quel nombre dans la premi\u00e8ce cellule de Input , ce programme va l'\u00e9crire dans Ouput . Pour que cela fonction, il faut \u00e9crire 800 dans la case m\u00e9moire d'adresse 00 et 900 dans celle d'adresse 01 .","title":"Entr\u00e9e-sortie"},{"location":"1NSI/02ExplicationsVIC/#avec-la-memoire","text":"Deux instructions permettent de travailler avec la m\u00e9moire vive : 3xx CHARGER le contenu de la case m\u00e9moire dont l'adresse est xx (o\u00f9 xx repr\u00e9sente deux chiffres) dans le registre de donn\u00e9e depuis 4xx ENREGISTRER le contenu du registre de donn\u00e9e dans la case m\u00e9moire dont l'adresse est xx. Am\u00e9lioration Am\u00e9liorons le programme pr\u00e9c\u00e9dent : on lit un nombre, on l'enregistre dans la case m\u00e9moire 10 puis on l'affiche. En assembleur : LIRE ENREGISTRER dans la case m\u00e9moire 10 \u00c9CRIRE en langage machine de VIC : 800 410 900 Afficher un nombre pr\u00e9cis Il n'est pas possible d'afficher le nombre 42. Pour cela, on peut l'\u00e9crire \u00e0 la main dans une zone m\u00e9moire (par exemple celle dont l'adresse est 02) puis programmer ainsi : CHARGER le contenu de la case 02 \u00c9CRIRE ce qui donne en langage machine les trois lignes suivantes : 310 900 42","title":"Avec la m\u00e9moire"},{"location":"1NSI/02ExplicationsVIC/#arithmetique","text":"VIC ne conna\u00eet que deux op\u00e9rations : addition et soustraction. \u00c0 chaque fois, il travaille avec une case m\u00e9moire d'adresse xx et le registre de donn\u00e9e. 1xx AJOUTE le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9e ; 2xx SOUSTRAIT le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9e. Attention L'ordre des nombres pour la soustraction est important. Addition Pour additionner deux nombres donn\u00e9s en entr\u00e9e, il faudra en enregistrer un en m\u00e9moire, par exemple dans la case 09. LIRE (le premier nombre) ENREGISTRER dans la case m\u00e9moire 09 LIRE (le deuxi\u00e8me) AJOUTER le nombre de la case 09 au registre de donn\u00e9e \u00c9CRIRE en langage machine : 800 410 800 110 900","title":"Arithm\u00e9tique"},{"location":"1NSI/02ExplicationsVIC/#controle-du-flux","text":"Toutes les instructions conditionnelles et les boucles se font en langage machine avec des instructions de contr\u00f4le de flux qui consistent \u00e0 passer, non pas \u00e0 l'instruction suivante, mais \u00e0 ALLER \u00e0 une certaine case m\u00e9moire. La plus simple est : 5xx ALLER ex\u00e9cuter l'instruction situ\u00e9e dans la case m\u00e9moire xx. Boucle infinie Pour ex\u00e9cuter une boucle infinie, on dit \u00e0 VIC d'aller ex\u00e9cuter l'instruction de la case 01. Cette instruction lui dit d'aller \u00e0 la case 00. ALLER \u00e0 la case 01 ALLER \u00e0 la case 00 en langage machine : 501 500 Vous verrez le compteur ordinal ( Program Counter ) alterner entre 0 et 1. Pour arr\u00eater VIC , appuyez sur le bouton en forme de carr\u00e9. Pour faire des tests, VIC poss\u00e8de deux autres instructions de contr\u00f4le de flux : 6xx ALLER_Z\u00c9RO qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9e contient la valeur 0. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. 7xx ALLER_POS qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9e contient une valeur strictement positive. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude.","title":"Contr\u00f4le du flux"},{"location":"TNSI/","text":"Terminale NSI \u2693\ufe0e bient\u00f4t","title":"Terminale NSI"},{"location":"TNSI/#terminale-nsi","text":"bient\u00f4t","title":"Terminale NSI"},{"location":"euro/","text":"Section euro \u2693\ufe0e Documents et activit\u00e9s pour la section europ\u00e9enne math\u00e9matiques en anglais.","title":"Section Euro"},{"location":"euro/#section-euro","text":"Documents et activit\u00e9s pour la section europ\u00e9enne math\u00e9matiques en anglais.","title":"Section euro"}]}