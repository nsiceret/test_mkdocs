{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours de NSI ! \u2693\ufe0e En cours de construction. Vous trouverez bient\u00f4t ici les supports de cours de NSI faits au lyc\u00e9e D\u00e9odat-de-S\u00e9verac de C\u00e9ret (Pyr\u00e9n\u00e9es-Orientales). Le menu du haut permet d'acc\u00e9der aux niveaux. Pour les \u00e9l\u00e8ves de 2021-2022 et avant, l'ancien site est toujours disponible ici .","title":"\ud83c\udfe1Accueil"},{"location":"#cours-de-nsi","text":"En cours de construction. Vous trouverez bient\u00f4t ici les supports de cours de NSI faits au lyc\u00e9e D\u00e9odat-de-S\u00e9verac de C\u00e9ret (Pyr\u00e9n\u00e9es-Orientales). Le menu du haut permet d'acc\u00e9der aux niveaux. Pour les \u00e9l\u00e8ves de 2021-2022 et avant, l'ancien site est toujours disponible ici .","title":"Cours de NSI !"},{"location":"1NSI/","text":"NSI en premi\u00e8re \u2693\ufe0e Pour acc\u00e9der \u00e0 un chapitre du cours de premi\u00e8re NSI, cliquez sur le menu de gauche.","title":"NSI en premi\u00e8re"},{"location":"1NSI/#nsi-en-premiere","text":"Pour acc\u00e9der \u00e0 un chapitre du cours de premi\u00e8re NSI, cliquez sur le menu de gauche.","title":"NSI en premi\u00e8re"},{"location":"1NSI/01BasesProgrammation/","text":"01. Bases de la programmation \u2693\ufe0e Nous utiliserons trois sites en ligne qui permettent d'apprendre \u00e0 programmer en Python. Leur point commun : ils sont autocorrig\u00e9s et offrent des aides personnalis\u00e9es, afin que vous puissiez travailler en autonomie. Comment utiliser ces sites ? Les instructions seront donn\u00e9es en classe, en particulier les objectifs \u00e0 remplir par p\u00e9riode. Future Coder explique pas \u00e0 pas Python depuis les bases. Il couvre une tr\u00e8s grande partie de la premi\u00e8re NSI en programmation. Le site de France-IOI pr\u00e9sente un apprentissage sous forme de jeu : votre mission sera d'aider des extraterrestres gr\u00e2ce \u00e0 votre robot. On acc\u00e8de aux exercices depuis le menu de gauche : Plan du site > Progresser > Cours et probl\u00e8mes. Py-rates est un autre site d'apprentissage de programmation, mais cette fois-ci le jeu consiste \u00e0 aider des pirates et le site ne demande pas d'inscription.","title":"01. Bases de la programmation"},{"location":"1NSI/01BasesProgrammation/#01-bases-de-la-programmation","text":"Nous utiliserons trois sites en ligne qui permettent d'apprendre \u00e0 programmer en Python. Leur point commun : ils sont autocorrig\u00e9s et offrent des aides personnalis\u00e9es, afin que vous puissiez travailler en autonomie. Comment utiliser ces sites ? Les instructions seront donn\u00e9es en classe, en particulier les objectifs \u00e0 remplir par p\u00e9riode. Future Coder explique pas \u00e0 pas Python depuis les bases. Il couvre une tr\u00e8s grande partie de la premi\u00e8re NSI en programmation. Le site de France-IOI pr\u00e9sente un apprentissage sous forme de jeu : votre mission sera d'aider des extraterrestres gr\u00e2ce \u00e0 votre robot. On acc\u00e8de aux exercices depuis le menu de gauche : Plan du site > Progresser > Cours et probl\u00e8mes. Py-rates est un autre site d'apprentissage de programmation, mais cette fois-ci le jeu consiste \u00e0 aider des pirates et le site ne demande pas d'inscription.","title":"01. Bases de la programmation"},{"location":"1NSI/02ArchitectureOrdinateur/","text":"Mod\u00e8le de von Neumann et langage machine \u2693\ufe0e Le mod\u00e8le de von Neumann \u2693\ufe0e Presque tous les ordinateurs fonctionnent selon le m\u00eame mod\u00e8le, appel\u00e9 mod\u00e8le de von Neumann . \u00c0 faire dans ce chapitre : des activit\u00e9s Capytale bas\u00e9es sur des vid\u00e9os ou des recherches. Ordinateur, tout un programme , C'est pas Sorcier How Computers Work: CPU, Memory, Input and Ouput , Code.org Le binaire Le langage machine \u2693\ufe0e Pour cette partie, nous utiliserons un simulateur d'ordinateur en ligne appel\u00e9 VIC ( VIsual Computer ). L'objectif est de voir comment fonctionne le mod\u00e8le de von Neumann. VIC en ligne Les explications sur son fonctionnement Exercices : programmez vous-m\u00eame dans VIC. Les \"vrais\" ordinateurs \u2693\ufe0e Le tableau ci-dessous compare VIC avec un ordinateur moyen d'aujourd'hui. VIC Ordinateur 1 registre de donn\u00e9es 32 registres de donn\u00e9es mots de 3 chiffres d\u00e9cimaux mots de 64 bits 100 cases m\u00e9moire des milliards de cases m\u00e9moire 1 m\u00e9moire plusieurs m\u00e9moires : RAM, ROM, m\u00e9moire cache... pas de stockage stockage sur disque dur, m\u00e9moire flash... 1 port d'entr\u00e9e clavier, souris, disk, ports r\u00e9seau... 1 port de sortie \u00e9cran, hauts-parleurs, disques, r\u00e9seau... 1 processeur plusieurs processeurs, parfois GPU (processeur d\u00e9di\u00e9 aux graphiques) 10 instructions en langage machine quelques centaines d'instructions 1 programme plusieurs programmes ex\u00e9cut\u00e9s \"en m\u00eame temps\" (ou presque) 1 instruction \u00e0 la fois ex\u00e9cution en parall\u00e8le","title":"Mod\u00e8le de von Neumann et langage machine"},{"location":"1NSI/02ArchitectureOrdinateur/#modele-de-von-neumann-et-langage-machine","text":"","title":"Mod\u00e8le de von Neumann et langage machine"},{"location":"1NSI/02ArchitectureOrdinateur/#le-modele-de-von-neumann","text":"Presque tous les ordinateurs fonctionnent selon le m\u00eame mod\u00e8le, appel\u00e9 mod\u00e8le de von Neumann . \u00c0 faire dans ce chapitre : des activit\u00e9s Capytale bas\u00e9es sur des vid\u00e9os ou des recherches. Ordinateur, tout un programme , C'est pas Sorcier How Computers Work: CPU, Memory, Input and Ouput , Code.org Le binaire","title":"Le mod\u00e8le de von Neumann"},{"location":"1NSI/02ArchitectureOrdinateur/#le-langage-machine","text":"Pour cette partie, nous utiliserons un simulateur d'ordinateur en ligne appel\u00e9 VIC ( VIsual Computer ). L'objectif est de voir comment fonctionne le mod\u00e8le de von Neumann. VIC en ligne Les explications sur son fonctionnement Exercices : programmez vous-m\u00eame dans VIC.","title":"Le langage machine"},{"location":"1NSI/02ArchitectureOrdinateur/#les-vrais-ordinateurs","text":"Le tableau ci-dessous compare VIC avec un ordinateur moyen d'aujourd'hui. VIC Ordinateur 1 registre de donn\u00e9es 32 registres de donn\u00e9es mots de 3 chiffres d\u00e9cimaux mots de 64 bits 100 cases m\u00e9moire des milliards de cases m\u00e9moire 1 m\u00e9moire plusieurs m\u00e9moires : RAM, ROM, m\u00e9moire cache... pas de stockage stockage sur disque dur, m\u00e9moire flash... 1 port d'entr\u00e9e clavier, souris, disk, ports r\u00e9seau... 1 port de sortie \u00e9cran, hauts-parleurs, disques, r\u00e9seau... 1 processeur plusieurs processeurs, parfois GPU (processeur d\u00e9di\u00e9 aux graphiques) 10 instructions en langage machine quelques centaines d'instructions 1 programme plusieurs programmes ex\u00e9cut\u00e9s \"en m\u00eame temps\" (ou presque) 1 instruction \u00e0 la fois ex\u00e9cution en parall\u00e8le","title":"Les \"vrais\" ordinateurs"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/","text":"Comment utiliser VIC \u2693\ufe0e VIC (Visual Computer) est un ordinateur minimal utilisable en ligne pour simuler le langage machine . Il comporte tr\u00e8s peu de composants et ne comprend qu'un nombre tr\u00e8s r\u00e9duit d'instructions. Cette simplification permet de comprendre le mod\u00e8le de von Neumann et les bases du langage machine . Dans VIC , toutes les donn\u00e9es sont des nombres entiers \u00e0 trois chiffres (de -999 \u00e0 999). Architecture \u2693\ufe0e L'interface de VIC est compos\u00e9e de trois parties, elles-m\u00eames partag\u00e9es en plusieurs composants : les composants d'entr\u00e9e/sortie ( I/O Units ), avec : un composant d'entr\u00e9e ( Input ) dans lequel vous pourrez \u00e9crire des nombres pour tester vos programmes ; un composant de sortie ( Output ) dans lequel le programme peut \u00e9crire un nombre; un processeur ( CPU ), compos\u00e9 de : un registre d'instruction ( Instruction Register ) dans lequel est indiqu\u00e9e la prochaine instruction \u00e0 ex\u00e9cuter ; un registre de donn\u00e9es ( Data Register ) qui contient la donn\u00e9e \u00e0 traiter (VIC ne peut traiter qu'une donn\u00e9e \u00e0 la fois) ; un compteur ordinal ( Program Counter ) qui contient l'adresse en m\u00e9moire de l'instruction \u00e0 ex\u00e9cuter. une m\u00e9moire vive ( Memory ) compos\u00e9e de 100 cases m\u00e9moire ou cellules num\u00e9rot\u00e9es de 00 \u00e0 99. Les seules cases dans lesquelles vous pouvez \u00e9crire \"\u00e0 la main\" sont celles du composant d'entr\u00e9e et de la m\u00e9moire. Les autres seront calcul\u00e9es par VIC . Instructions \u2693\ufe0e Comme les \"vrais\" ordinateurs, VIC ne conna\u00eet qu'un petit nombre d'instructions. Elles sont ici au nombre de dix. VIC commence son ex\u00e9cution avec l'instructions situ\u00e9e dans la case m\u00e9moire d'adresse 00. \u00c0 chaque \u00e9tape, il ex\u00e9cute l'instruction situ\u00e9e dans la case m\u00e9moire courante puis passe \u00e0 la suvante. Le programme s'arr\u00eate lorsqu'il rencontre une case m\u00e9moire vide ou, ce qui revient au m\u00eame, qui contient le nombre 0. Nous avons donc notre premi\u00e8re instruction en langage machine : 000 : STOP arr\u00eater le programme. Le langage machine \u2693\ufe0e Le langage machine est le langage compris par la machine au niveau des composants. Il s'exprime \u00e0 l'aide de nombres entiers. Pour faciliter le travail des humains, on utilise un langage appel\u00e9 assembleur qui consiste \u00e0 remplacer chaque nombre par une expression plus lisible. Par exemple, nous avons vu que l'instruction machine 000 se traduit en assembleur par STOP. Entr\u00e9e-sortie \u2693\ufe0e VIC comprend deux instructions d'entr\u00e9e-sortie : 800 : LIRE la case courante du composant d'entr\u00e9e et mettre sa valeur dans le registre de donn\u00e9es 900 : \u00c9CRIRE la valeur du registre de donn\u00e9es dans la case suivante du composant de sortie. Premier exemple : lire et afficher Un programme qui lit une donn\u00e9e puis l'\u00e9crit dans Ouput . Ce programme s'\u00e9crirait ainsi en assembleur : LIRE \u00c9CRIRE STOP ce qui donne, en langage machine de VIC : 800 900 000 Essayez ! Si vous \u00e9crivez n'importe quel nombre dans la premi\u00e8ce cellule de Input , ce programme va l'\u00e9crire dans Ouput . Pour que cela fonctionne, il faut \u00e9crire 800 dans la case m\u00e9moire d'adresse 00 et 900 dans celle d'adresse 01 et ensuite cliquer sur un des boutons d'ex\u00e9cution de VIC . Dans la suite, nous omettrons la ligne 000 STOP pour all\u00e9ger les programmes. Avec la m\u00e9moire \u2693\ufe0e Deux instructions permettent de travailler avec la m\u00e9moire vive : 3xx : CHARGER le contenu depuis la case m\u00e9moire dont l'adresse est xx (o\u00f9 xx repr\u00e9sente deux chiffres) dans le registre de donn\u00e9es ; 4xx : ENREGISTRER le contenu du registre de donn\u00e9es dans la case m\u00e9moire dont l'adresse est xx. Affichage inverse On veut lire deux nombres, puis les afficher dans l'ordre inverse : d'abord le deuxi\u00e8me nombre entr\u00e9, puis le premier. Pour cela, il faut garder le premier nombre en m\u00e9moire, par exemple dans la case 10. En assembleur cela donne : LIRE ENREGISTRER dans la case m\u00e9moire 10 LIRE \u00c9CRIRE CHARGER le nombre de la case m\u00e9more 10 \u00c9CRIRE en langage machine de VIC : 800 410 800 900 310 900 Arithm\u00e9tique \u2693\ufe0e VIC ne conna\u00eet que deux op\u00e9rations : addition et soustraction. \u00c0 chaque fois, il travaille avec une case m\u00e9moire d'adresse xx et le registre de donn\u00e9es. 1xx : AJOUTER le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es ; 2xx : SOUSTRAIRE le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es. Attention L'ordre des nombres pour la soustraction est important. Addition de deux nombres Pour additionner deux nombres donn\u00e9s en entr\u00e9e, il faudra en enregistrer un en m\u00e9moire, par exemple dans la case 09. LIRE (le premier nombre) ENREGISTRER dans la case m\u00e9moire 09 LIRE (le deuxi\u00e8me) AJOUTER le nombre de la case 09 au registre de donn\u00e9es \u00c9CRIRE en langage machine : 800 409 800 109 900 Contr\u00f4le du flux \u2693\ufe0e Toutes les instructions conditionnelles et les boucles se font en langage machine avec des instructions de contr\u00f4le de flux qui consistent \u00e0 passer, non pas \u00e0 l'instruction suivante, mais \u00e0 ALLER \u00e0 une certaine case m\u00e9moire. La plus simple est : 5xx : ALLER ex\u00e9cuter l'instruction situ\u00e9e dans la case m\u00e9moire xx. Boucle infinie Pour ex\u00e9cuter une boucle infinie, on dit \u00e0 VIC d'aller ex\u00e9cuter l'instruction de la case 01. Cette instruction lui dit d'aller \u00e0 la case 00. ALLER \u00e0 la case 01 ALLER \u00e0 la case 00 en langage machine : 501 500 Vous verrez le compteur ordinal ( Program Counter ) alterner entre 0 et 1. Pour arr\u00eater VIC , appuyez sur le bouton en forme de carr\u00e9. Pour faire des tests, VIC poss\u00e8de deux autres instructions de contr\u00f4le de flux : 6xx : ALLER_Z\u00c9RO qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient la valeur 0. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. 7xx : ALLER_POS qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient une valeur strictement positive. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. Liste de nombres positifs On voudrait afficher une liste de nombres positifs donn\u00e9s en entr\u00e9e. Il va donc falloir LIRE, puis ALLER \u00e0 une cellule indiquant d'\u00e9crire et de revenir au d\u00e9but du programme si le nombre lu est positif. Si le nombre n'est pas positif, on passe \u00e0 la cellule suivante qui arr\u00eate le programme. Ce programme va lire et afficher les nombres positifs qui seront donn\u00e9s en entr\u00e9e. Il s'arr\u00eatera au premier nombre n\u00e9gatif ou nul rencontr\u00e9. En assembleur : LIRE ALLER_POS \u00e0 03 STOP \u00c9CRIRE ALLER \u00e0 0 en langage machine : 800 703 000 900 500","title":"Comment utiliser VIC"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#comment-utiliser-vic","text":"VIC (Visual Computer) est un ordinateur minimal utilisable en ligne pour simuler le langage machine . Il comporte tr\u00e8s peu de composants et ne comprend qu'un nombre tr\u00e8s r\u00e9duit d'instructions. Cette simplification permet de comprendre le mod\u00e8le de von Neumann et les bases du langage machine . Dans VIC , toutes les donn\u00e9es sont des nombres entiers \u00e0 trois chiffres (de -999 \u00e0 999).","title":"Comment utiliser VIC"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#architecture","text":"L'interface de VIC est compos\u00e9e de trois parties, elles-m\u00eames partag\u00e9es en plusieurs composants : les composants d'entr\u00e9e/sortie ( I/O Units ), avec : un composant d'entr\u00e9e ( Input ) dans lequel vous pourrez \u00e9crire des nombres pour tester vos programmes ; un composant de sortie ( Output ) dans lequel le programme peut \u00e9crire un nombre; un processeur ( CPU ), compos\u00e9 de : un registre d'instruction ( Instruction Register ) dans lequel est indiqu\u00e9e la prochaine instruction \u00e0 ex\u00e9cuter ; un registre de donn\u00e9es ( Data Register ) qui contient la donn\u00e9e \u00e0 traiter (VIC ne peut traiter qu'une donn\u00e9e \u00e0 la fois) ; un compteur ordinal ( Program Counter ) qui contient l'adresse en m\u00e9moire de l'instruction \u00e0 ex\u00e9cuter. une m\u00e9moire vive ( Memory ) compos\u00e9e de 100 cases m\u00e9moire ou cellules num\u00e9rot\u00e9es de 00 \u00e0 99. Les seules cases dans lesquelles vous pouvez \u00e9crire \"\u00e0 la main\" sont celles du composant d'entr\u00e9e et de la m\u00e9moire. Les autres seront calcul\u00e9es par VIC .","title":"Architecture"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#instructions","text":"Comme les \"vrais\" ordinateurs, VIC ne conna\u00eet qu'un petit nombre d'instructions. Elles sont ici au nombre de dix. VIC commence son ex\u00e9cution avec l'instructions situ\u00e9e dans la case m\u00e9moire d'adresse 00. \u00c0 chaque \u00e9tape, il ex\u00e9cute l'instruction situ\u00e9e dans la case m\u00e9moire courante puis passe \u00e0 la suvante. Le programme s'arr\u00eate lorsqu'il rencontre une case m\u00e9moire vide ou, ce qui revient au m\u00eame, qui contient le nombre 0. Nous avons donc notre premi\u00e8re instruction en langage machine : 000 : STOP arr\u00eater le programme.","title":"Instructions"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#le-langage-machine","text":"Le langage machine est le langage compris par la machine au niveau des composants. Il s'exprime \u00e0 l'aide de nombres entiers. Pour faciliter le travail des humains, on utilise un langage appel\u00e9 assembleur qui consiste \u00e0 remplacer chaque nombre par une expression plus lisible. Par exemple, nous avons vu que l'instruction machine 000 se traduit en assembleur par STOP.","title":"Le langage machine"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#entree-sortie","text":"VIC comprend deux instructions d'entr\u00e9e-sortie : 800 : LIRE la case courante du composant d'entr\u00e9e et mettre sa valeur dans le registre de donn\u00e9es 900 : \u00c9CRIRE la valeur du registre de donn\u00e9es dans la case suivante du composant de sortie. Premier exemple : lire et afficher Un programme qui lit une donn\u00e9e puis l'\u00e9crit dans Ouput . Ce programme s'\u00e9crirait ainsi en assembleur : LIRE \u00c9CRIRE STOP ce qui donne, en langage machine de VIC : 800 900 000 Essayez ! Si vous \u00e9crivez n'importe quel nombre dans la premi\u00e8ce cellule de Input , ce programme va l'\u00e9crire dans Ouput . Pour que cela fonctionne, il faut \u00e9crire 800 dans la case m\u00e9moire d'adresse 00 et 900 dans celle d'adresse 01 et ensuite cliquer sur un des boutons d'ex\u00e9cution de VIC . Dans la suite, nous omettrons la ligne 000 STOP pour all\u00e9ger les programmes.","title":"Entr\u00e9e-sortie"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#avec-la-memoire","text":"Deux instructions permettent de travailler avec la m\u00e9moire vive : 3xx : CHARGER le contenu depuis la case m\u00e9moire dont l'adresse est xx (o\u00f9 xx repr\u00e9sente deux chiffres) dans le registre de donn\u00e9es ; 4xx : ENREGISTRER le contenu du registre de donn\u00e9es dans la case m\u00e9moire dont l'adresse est xx. Affichage inverse On veut lire deux nombres, puis les afficher dans l'ordre inverse : d'abord le deuxi\u00e8me nombre entr\u00e9, puis le premier. Pour cela, il faut garder le premier nombre en m\u00e9moire, par exemple dans la case 10. En assembleur cela donne : LIRE ENREGISTRER dans la case m\u00e9moire 10 LIRE \u00c9CRIRE CHARGER le nombre de la case m\u00e9more 10 \u00c9CRIRE en langage machine de VIC : 800 410 800 900 310 900","title":"Avec la m\u00e9moire"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#arithmetique","text":"VIC ne conna\u00eet que deux op\u00e9rations : addition et soustraction. \u00c0 chaque fois, il travaille avec une case m\u00e9moire d'adresse xx et le registre de donn\u00e9es. 1xx : AJOUTER le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es ; 2xx : SOUSTRAIRE le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es. Attention L'ordre des nombres pour la soustraction est important. Addition de deux nombres Pour additionner deux nombres donn\u00e9s en entr\u00e9e, il faudra en enregistrer un en m\u00e9moire, par exemple dans la case 09. LIRE (le premier nombre) ENREGISTRER dans la case m\u00e9moire 09 LIRE (le deuxi\u00e8me) AJOUTER le nombre de la case 09 au registre de donn\u00e9es \u00c9CRIRE en langage machine : 800 409 800 109 900","title":"Arithm\u00e9tique"},{"location":"1NSI/02ArchitectureOrdinateur/021Explications/#controle-du-flux","text":"Toutes les instructions conditionnelles et les boucles se font en langage machine avec des instructions de contr\u00f4le de flux qui consistent \u00e0 passer, non pas \u00e0 l'instruction suivante, mais \u00e0 ALLER \u00e0 une certaine case m\u00e9moire. La plus simple est : 5xx : ALLER ex\u00e9cuter l'instruction situ\u00e9e dans la case m\u00e9moire xx. Boucle infinie Pour ex\u00e9cuter une boucle infinie, on dit \u00e0 VIC d'aller ex\u00e9cuter l'instruction de la case 01. Cette instruction lui dit d'aller \u00e0 la case 00. ALLER \u00e0 la case 01 ALLER \u00e0 la case 00 en langage machine : 501 500 Vous verrez le compteur ordinal ( Program Counter ) alterner entre 0 et 1. Pour arr\u00eater VIC , appuyez sur le bouton en forme de carr\u00e9. Pour faire des tests, VIC poss\u00e8de deux autres instructions de contr\u00f4le de flux : 6xx : ALLER_Z\u00c9RO qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient la valeur 0. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. 7xx : ALLER_POS qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient une valeur strictement positive. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. Liste de nombres positifs On voudrait afficher une liste de nombres positifs donn\u00e9s en entr\u00e9e. Il va donc falloir LIRE, puis ALLER \u00e0 une cellule indiquant d'\u00e9crire et de revenir au d\u00e9but du programme si le nombre lu est positif. Si le nombre n'est pas positif, on passe \u00e0 la cellule suivante qui arr\u00eate le programme. Ce programme va lire et afficher les nombres positifs qui seront donn\u00e9s en entr\u00e9e. Il s'arr\u00eatera au premier nombre n\u00e9gatif ou nul rencontr\u00e9. En assembleur : LIRE ALLER_POS \u00e0 03 STOP \u00c9CRIRE ALLER \u00e0 0 en langage machine : 800 703 000 900 500","title":"Contr\u00f4le du flux"},{"location":"1NSI/02ArchitectureOrdinateur/02Exercices/","text":"Exercices avec VIC \u2693\ufe0e Entr\u00e9e, sortie et m\u00e9moire \u2693\ufe0e Addition et soustraction \u2693\ufe0e Contr\u00f4le de flux \u2693\ufe0e","title":"Exercices avec VIC"},{"location":"1NSI/02ArchitectureOrdinateur/02Exercices/#exercices-avec-vic","text":"","title":"Exercices avec VIC"},{"location":"1NSI/02ArchitectureOrdinateur/02Exercices/#entree-sortie-et-memoire","text":"","title":"Entr\u00e9e, sortie et m\u00e9moire"},{"location":"1NSI/02ArchitectureOrdinateur/02Exercices/#addition-et-soustraction","text":"","title":"Addition et soustraction"},{"location":"1NSI/02ArchitectureOrdinateur/02Exercices/#controle-de-flux","text":"","title":"Contr\u00f4le de flux"},{"location":"1NSI/03ProgrammerFonction/","text":"03. Programmer une fonction \u2693\ufe0e (bient\u00f4t)","title":"03. Programmer une fonction"},{"location":"1NSI/03ProgrammerFonction/#03-programmer-une-fonction","text":"(bient\u00f4t)","title":"03. Programmer une fonction"},{"location":"1NSI/04NombresEntiersNaturels/","text":"04. Nombres entiers naturels \u2693\ufe0e (bient\u00f4t)","title":"04. Nombres entiers naturels"},{"location":"1NSI/04NombresEntiersNaturels/#04-nombres-entiers-naturels","text":"(bient\u00f4t)","title":"04. Nombres entiers naturels"},{"location":"1NSI/05BooleensOperateursLogiques/","text":"05. Bool\u00e9ens et op\u00e9rateurs logiques \u2693\ufe0e (bient\u00f4t)","title":"05. Bool\u00e9ens et op\u00e9rateurs logiques"},{"location":"1NSI/05BooleensOperateursLogiques/#05-booleens-et-operateurs-logiques","text":"(bient\u00f4t)","title":"05. Bool\u00e9ens et op\u00e9rateurs logiques"},{"location":"1NSI/06Textes/","text":"06. Textes \u2693\ufe0e (bient\u00f4t)","title":"06. Textes"},{"location":"1NSI/06Textes/#06-textes","text":"(bient\u00f4t)","title":"06. Textes"},{"location":"1NSI/07SystemesExploitation/","text":"07. Syst\u00e8mes d'exploitation et commandes UNIX \u2693\ufe0e (bient\u00f4t)","title":"07. Syst\u00e8mes d'exploitation et commandes UNIX"},{"location":"1NSI/07SystemesExploitation/#07-systemes-dexploitation-et-commandes-unix","text":"(bient\u00f4t)","title":"07. Syst\u00e8mes d'exploitation et commandes UNIX"},{"location":"1NSI/08Listes/","text":"08. Listes \u2693\ufe0e (bient\u00f4t)","title":"08. Listes"},{"location":"1NSI/08Listes/#08-listes","text":"(bient\u00f4t)","title":"08. Listes"},{"location":"1NSI/09NombresEntiersRelatifs/","text":"09. Nombres entiers relatifs \u2693\ufe0e (bient\u00f4t)","title":"09. Nombres entiers relatifs"},{"location":"1NSI/09NombresEntiersRelatifs/#09-nombres-entiers-relatifs","text":"(bient\u00f4t)","title":"09. Nombres entiers relatifs"},{"location":"1NSI/10Dictionnaires/","text":"10. Dictionnaires \u2693\ufe0e (bient\u00f4t)","title":"10. Dictionnaires"},{"location":"1NSI/10Dictionnaires/#10-dictionnaires","text":"(bient\u00f4t)","title":"10. Dictionnaires"},{"location":"1NSI/11Reseaux/","text":"11. R\u00e9seaux \u2693\ufe0e (bient\u00f4t)","title":"11. R\u00e9seaux"},{"location":"1NSI/11Reseaux/#11-reseaux","text":"(bient\u00f4t)","title":"11. R\u00e9seaux"},{"location":"1NSI/12Matrices/","text":"12. Matrices \u2693\ufe0e (bient\u00f4t)","title":"12. Matrices"},{"location":"1NSI/12Matrices/#12-matrices","text":"(bient\u00f4t)","title":"12. Matrices"},{"location":"1NSI/13RechercheDansTableau/","text":"13. Rechercher dans un tableau \u2693\ufe0e (bient\u00f4t)","title":"13. Rechercher dans un tableau"},{"location":"1NSI/13RechercheDansTableau/#13-rechercher-dans-un-tableau","text":"(bient\u00f4t)","title":"13. Rechercher dans un tableau"},{"location":"1NSI/14NombresFlottants/","text":"14. Nombres flottants \u2693\ufe0e (bient\u00f4t)","title":"14. Nombres flottants"},{"location":"1NSI/14NombresFlottants/#14-nombres-flottants","text":"(bient\u00f4t)","title":"14. Nombres flottants"},{"location":"1NSI/15AlgorithmesTri/","text":"15. Algorithmes de tri \u2693\ufe0e (bient\u00f4t)","title":"15. Algorithmes de tri"},{"location":"1NSI/15AlgorithmesTri/#15-algorithmes-de-tri","text":"(bient\u00f4t)","title":"15. Algorithmes de tri"},{"location":"1NSI/16DonneesTables/","text":"16. Donn\u00e9es en tables \u2693\ufe0e (bient\u00f4t)","title":"16. Donn\u00e9es en tables"},{"location":"1NSI/16DonneesTables/#16-donnees-en-tables","text":"(bient\u00f4t)","title":"16. Donn\u00e9es en tables"},{"location":"1NSI/17AlgorithmesGloutons/","text":"17. Algorithmes gloutons \u2693\ufe0e (bient\u00f4t)","title":"17. Algorithmes gloutons"},{"location":"1NSI/17AlgorithmesGloutons/#17-algorithmes-gloutons","text":"(bient\u00f4t)","title":"17. Algorithmes gloutons"},{"location":"1NSI/18KNN/","text":"18. Algorithme des k plus proches voisins \u2693\ufe0e (bient\u00f4t)","title":"18. Algorithme des k plus proches voisins"},{"location":"1NSI/18KNN/#18-algorithme-des-k-plus-proches-voisins","text":"(bient\u00f4t)","title":"18. Algorithme des k plus proches voisins"},{"location":"1NSI/19IHMWeb/","text":"19. Interface homme-machine sur le Web \u2693\ufe0e (bient\u00f4t)","title":"19. Interface homme-machine sur le Web"},{"location":"1NSI/19IHMWeb/#19-interface-homme-machine-sur-le-web","text":"(bient\u00f4t)","title":"19. Interface homme-machine sur le Web"},{"location":"TNSI/","text":"Terminale NSI \u2693\ufe0e Pour acc\u00e9der \u00e0 un chapitre, cliquez sur le menu de gauche. Deux sites permettent de r\u00e9viser une grande partie du programme de premi\u00e8re. Ils sont interactifs et autocorrig\u00e9s. France IOI Future Coder","title":"Terminale NSI"},{"location":"TNSI/#terminale-nsi","text":"Pour acc\u00e9der \u00e0 un chapitre, cliquez sur le menu de gauche. Deux sites permettent de r\u00e9viser une grande partie du programme de premi\u00e8re. Ils sont interactifs et autocorrig\u00e9s. France IOI Future Coder","title":"Terminale NSI"},{"location":"TNSI/01ListesPilesFiles/00Introduction/","text":"Structures de donn\u00e9es lin\u00e9aires \u2693\ufe0e En premi\u00e8re, nous avons \u00e9tudi\u00e9 plusieurs types de donn\u00e9es : les nombres entiers, les flottants, les chaines de caract\u00e8res, les dictionnaires... Le type de donn\u00e9es liste ou tableau est une structure de donn\u00e9es lin\u00e9aire , ce qui veut dire : structure de donn\u00e9es : plusieurs donn\u00e9es (les \u00e9l\u00e9ments ) sont organis\u00e9es ensemble dans la structure ; lin\u00e9aire : les \u00e9l\u00e9ments sont plac\u00e9s les uns \u00e0 la suite des autres dans un certain ordre. En terminale, nous allons \u00e9tudier deux autres structures de donn\u00e9es lin\u00e9aires : les files et les piles . Un type abstrait de donn\u00e9es est un mod\u00e8le correspondant \u00e0 de nombreuses situations concr\u00e8tes. Dans ce mod\u00e8le abstrait, on garde uniquement les propri\u00e9t\u00e9s essentielles communes \u00e0 toutes ces situations. L'int\u00e9r\u00eat est qu'en \u00e9tudiant un mod\u00e8le simple et abstrait, on peut r\u00e9soudre de tr\u00e8s nombreux probl\u00e8mes concrets qui correspondent \u00e0 ce mod\u00e8le. Plus tard dans l'ann\u00e9e nous verrons d'autres structures de donn\u00e9es qui ne sont pas lin\u00e9aires.","title":"Structures de donn\u00e9es lin\u00e9aires"},{"location":"TNSI/01ListesPilesFiles/00Introduction/#structures-de-donnees-lineaires","text":"En premi\u00e8re, nous avons \u00e9tudi\u00e9 plusieurs types de donn\u00e9es : les nombres entiers, les flottants, les chaines de caract\u00e8res, les dictionnaires... Le type de donn\u00e9es liste ou tableau est une structure de donn\u00e9es lin\u00e9aire , ce qui veut dire : structure de donn\u00e9es : plusieurs donn\u00e9es (les \u00e9l\u00e9ments ) sont organis\u00e9es ensemble dans la structure ; lin\u00e9aire : les \u00e9l\u00e9ments sont plac\u00e9s les uns \u00e0 la suite des autres dans un certain ordre. En terminale, nous allons \u00e9tudier deux autres structures de donn\u00e9es lin\u00e9aires : les files et les piles . Un type abstrait de donn\u00e9es est un mod\u00e8le correspondant \u00e0 de nombreuses situations concr\u00e8tes. Dans ce mod\u00e8le abstrait, on garde uniquement les propri\u00e9t\u00e9s essentielles communes \u00e0 toutes ces situations. L'int\u00e9r\u00eat est qu'en \u00e9tudiant un mod\u00e8le simple et abstrait, on peut r\u00e9soudre de tr\u00e8s nombreux probl\u00e8mes concrets qui correspondent \u00e0 ce mod\u00e8le. Plus tard dans l'ann\u00e9e nous verrons d'autres structures de donn\u00e9es qui ne sont pas lin\u00e9aires.","title":"Structures de donn\u00e9es lin\u00e9aires"},{"location":"TNSI/01ListesPilesFiles/010Files/00Introduction/","text":"Observation \u2693\ufe0e Quels points communs y a-t-il entre les situations suivantes ? Enfants attendant de se faire vacciner \u00e0 Maribor (Slov\u00e9nie) en 1962. Un d\u00e9fil\u00e9 de mode en 2009 au Nig\u00e9ria. Des embouteillages en 2019 dans une rue de Toulouse.","title":"Observation"},{"location":"TNSI/01ListesPilesFiles/010Files/00Introduction/#observation","text":"Quels points communs y a-t-il entre les situations suivantes ? Enfants attendant de se faire vacciner \u00e0 Maribor (Slov\u00e9nie) en 1962. Un d\u00e9fil\u00e9 de mode en 2009 au Nig\u00e9ria. Des embouteillages en 2019 dans une rue de Toulouse.","title":"Observation"},{"location":"TNSI/01ListesPilesFiles/010Files/01definition/","text":"D\u00e9finition \u2693\ufe0e Des enfants, dans une file d'attente, vont se faire vacciner ; des mannequins, dans un d\u00e9fil\u00e9 de mode, sont photographi\u00e9es ; des voitures, dans un embouteillage, vont sortir de la rue... toutes ces situations ont un point commun : les donn\u00e9es (enfants, mannequins, voitures) sont rang\u00e9es dans un certain ordre et ob\u00e9issent \u00e0 la r\u00e8gle \"premier arriv\u00e9, premier servi\". Cette situation s'appelle une file . File : d\u00e9finition Une file est constitu\u00e9e d'\u00e9l\u00e9ments plac\u00e9s les uns \u00e0 la suite des autres. Elle peut \u00e9ventuellement \u00eatre vide. On peut faire quatre op\u00e9rations sur une file : cr\u00e9er une file vide ; tester si une file est vide ; ajouter un \u00e9l\u00e9ment \u00e0 la fin de la file : on dit enfiler ; enlever l'\u00e9l\u00e9ment qui est au d\u00e9but de la file : d\u00e9filer . Les files suivent le principe FIFO (de l'anglais First In, First Out ) qui signifie premier arriv\u00e9, premier sorti . Pour traiter un \u00e9l\u00e9ment de la file, il faut le d\u00e9filer : on ne peut traiter que l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate et il faut l'enlever de la file. Premier exemple Supposons que trois mannequins, Noa, Sam et Tim soient sur le podium, dans cet ordre. Les fl\u00e8ches indiquent dans quel sens avance le d\u00e9fil\u00e9. graph RL Sam --> Tim; Tim --> Noa; La file a pu \u00eatre constitu\u00e9e ainsi : Pr\u00e9paration du podium (cr\u00e9er une file vide) Ajout de Noa \u00e0 la file Ajout de Tim \u00e0 la file (derri\u00e8re Noa) Ajout de Sam \u00e0 la file (derri\u00e8re Tim) Si nous d\u00e9filons la file, c'est le premier \u00e9l\u00e9ment arriv\u00e9 qui est enlev\u00e9, on obtient : graph RL Sam --> Tim; Si Jo arrive, la file devient : graph RL Sam --> Tim; Jo --> Sam; car Jo doit se placer \u00e0 la fin de la file. Essayez Ci-dessous, une interface Python fournit les fonctions suivantes : creer_file_vide est_vide enfiler defiler Avec en plus une fonction afficher_file qui vous sera utile. Vous pouvez avoir plus d'informations sur une fonction appel\u00e9e f en tapant help(f) dans la console. Utilisez l'interface pour cr\u00e9er, modifier et afficher des files. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder #--- HDR ---#bksl-nldef creerpy-undfilepy-undvide():bksl-nl \"\"\"bksl-nl Renvoie une file videbksl-nl \"\"\"bksl-nl return []bksl-nlbksl-nldef estpy-undvide(file):bksl-nl \"\"\"bksl-nl Renvoie True si file est vide, sinon renvoie Falsebksl-nl \"\"\"bksl-nl return len(file) == 0bksl-nlbksl-nldef enfiler(file,item):bksl-nl \"\"\"bksl-nl Emfile item \u00e0 la fin de file bksl-nl \"\"\"bksl-nl file.append(item)bksl-nl bksl-nldef defiler(file):bksl-nl \"\"\"bksl-nl D\u00e9file la file et renvoie l'\u00e9l\u00e9ment enlev\u00e9bksl-nl \"\"\"bksl-nl assert not estpy-undvide(file),\"on ne peut pas d\u00e9filer une file vide\"bksl-nl return file.pop(0)bksl-nlbksl-nldef afficherpy-undfile(file):bksl-nl \"\"\"bksl-nl Afficher file dans la consolebksl-nl \"\"\"bksl-nl print('->'.join(map(str,file)))bksl-nl#--- HDR ---#bksl-nlbksl-nlF = creerpy-undfilepy-undvide() #une file videbksl-nlenfiler(F,3) # j'enfile le nombre 3 dans Fbksl-nlenfiler(F,5) # j'enfile le nombre 5 dans Fbksl-nldefiler(F) # j'enl\u00e8ve... quoi ?bksl-nlenfiler(F,2)bksl-nlenfiler(F,8)bksl-nlafficherpy-undfile(F)bksl-nlbksl-nl","title":"D\u00e9finition"},{"location":"TNSI/01ListesPilesFiles/010Files/01definition/#definition","text":"Des enfants, dans une file d'attente, vont se faire vacciner ; des mannequins, dans un d\u00e9fil\u00e9 de mode, sont photographi\u00e9es ; des voitures, dans un embouteillage, vont sortir de la rue... toutes ces situations ont un point commun : les donn\u00e9es (enfants, mannequins, voitures) sont rang\u00e9es dans un certain ordre et ob\u00e9issent \u00e0 la r\u00e8gle \"premier arriv\u00e9, premier servi\". Cette situation s'appelle une file . File : d\u00e9finition Une file est constitu\u00e9e d'\u00e9l\u00e9ments plac\u00e9s les uns \u00e0 la suite des autres. Elle peut \u00e9ventuellement \u00eatre vide. On peut faire quatre op\u00e9rations sur une file : cr\u00e9er une file vide ; tester si une file est vide ; ajouter un \u00e9l\u00e9ment \u00e0 la fin de la file : on dit enfiler ; enlever l'\u00e9l\u00e9ment qui est au d\u00e9but de la file : d\u00e9filer . Les files suivent le principe FIFO (de l'anglais First In, First Out ) qui signifie premier arriv\u00e9, premier sorti . Pour traiter un \u00e9l\u00e9ment de la file, il faut le d\u00e9filer : on ne peut traiter que l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate et il faut l'enlever de la file. Premier exemple Supposons que trois mannequins, Noa, Sam et Tim soient sur le podium, dans cet ordre. Les fl\u00e8ches indiquent dans quel sens avance le d\u00e9fil\u00e9. graph RL Sam --> Tim; Tim --> Noa; La file a pu \u00eatre constitu\u00e9e ainsi : Pr\u00e9paration du podium (cr\u00e9er une file vide) Ajout de Noa \u00e0 la file Ajout de Tim \u00e0 la file (derri\u00e8re Noa) Ajout de Sam \u00e0 la file (derri\u00e8re Tim) Si nous d\u00e9filons la file, c'est le premier \u00e9l\u00e9ment arriv\u00e9 qui est enlev\u00e9, on obtient : graph RL Sam --> Tim; Si Jo arrive, la file devient : graph RL Sam --> Tim; Jo --> Sam; car Jo doit se placer \u00e0 la fin de la file. Essayez Ci-dessous, une interface Python fournit les fonctions suivantes : creer_file_vide est_vide enfiler defiler Avec en plus une fonction afficher_file qui vous sera utile. Vous pouvez avoir plus d'informations sur une fonction appel\u00e9e f en tapant help(f) dans la console. Utilisez l'interface pour cr\u00e9er, modifier et afficher des files. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder #--- HDR ---#bksl-nldef creerpy-undfilepy-undvide():bksl-nl \"\"\"bksl-nl Renvoie une file videbksl-nl \"\"\"bksl-nl return []bksl-nlbksl-nldef estpy-undvide(file):bksl-nl \"\"\"bksl-nl Renvoie True si file est vide, sinon renvoie Falsebksl-nl \"\"\"bksl-nl return len(file) == 0bksl-nlbksl-nldef enfiler(file,item):bksl-nl \"\"\"bksl-nl Emfile item \u00e0 la fin de file bksl-nl \"\"\"bksl-nl file.append(item)bksl-nl bksl-nldef defiler(file):bksl-nl \"\"\"bksl-nl D\u00e9file la file et renvoie l'\u00e9l\u00e9ment enlev\u00e9bksl-nl \"\"\"bksl-nl assert not estpy-undvide(file),\"on ne peut pas d\u00e9filer une file vide\"bksl-nl return file.pop(0)bksl-nlbksl-nldef afficherpy-undfile(file):bksl-nl \"\"\"bksl-nl Afficher file dans la consolebksl-nl \"\"\"bksl-nl print('->'.join(map(str,file)))bksl-nl#--- HDR ---#bksl-nlbksl-nlF = creerpy-undfilepy-undvide() #une file videbksl-nlenfiler(F,3) # j'enfile le nombre 3 dans Fbksl-nlenfiler(F,5) # j'enfile le nombre 5 dans Fbksl-nldefiler(F) # j'enl\u00e8ve... quoi ?bksl-nlenfiler(F,2)bksl-nlenfiler(F,8)bksl-nlafficherpy-undfile(F)bksl-nlbksl-nl","title":"D\u00e9finition"},{"location":"TNSI/01ListesPilesFiles/010Files/02Parcourir/","text":"Parcourir une file \u2693\ufe0e Une file ne contient que quatre op\u00e9rations (ou fonctions) \u00e9l\u00e9mentaires. En particulier, il n'y a pas de fonction longueur pour calculer le nombre d'\u00e9l\u00e9ments d'une file. Mais parfois on peut avoir besoin de plus. Le mod\u00e8le \u00e0 suivre pour \u00e9tudier une file est de d\u00e9filer un \u00e0 un les \u00e9l\u00e9ments jusqu'\u00e0 obtenir ce qu'on veut ou que la file soit vide. \u00c0 noter que lorsqu'on d\u00e9file un \u00e9l\u00e9ment, on l'enl\u00e8ve de la file. Programmons deux nouvelles fonctions : calculer la longueur d'une file et chercher si un \u00e9l\u00e9ment est dans une file. Longueur \u2693\ufe0e Pour calculer la longueur d'une file, on initialise un compteur \u00e0 z\u00e9ro. Puis, TANT QUE la file n'est pas vide, on d\u00e9file l'\u00e9l\u00e9ment de t\u00eate et on ajoute un au compteur. Ci-dessous, une fonction Python longueur qui calcule la longueur d'une file donn\u00e9e en param\u00e8tre. \u00c9tudiez bien son code pour le comprendre. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder #--- HDR ---#bksl-nldef creerpy-undfilepy-undvide():bksl-nl \"\"\"bksl-nl Renvoie une file videbksl-nl \"\"\"bksl-nl return []bksl-nlbksl-nldef estpy-undvide(file):bksl-nl \"\"\"bksl-nl Renvoie True si file est vide, sinon renvoie Falsebksl-nl \"\"\"bksl-nl return len(file) == 0bksl-nlbksl-nldef enfiler(file,item):bksl-nl \"\"\"bksl-nl Emfile item \u00e0 la fin de file bksl-nl \"\"\"bksl-nl file.append(item)bksl-nl bksl-nldef defiler(file):bksl-nl \"\"\"bksl-nl D\u00e9file la file et renvoie l'\u00e9l\u00e9ment enlev\u00e9bksl-nl \"\"\"bksl-nl assert not estpy-undvide(file),\"on ne peut pas d\u00e9filer une file vide\"bksl-nl return file.pop(0) #fonction Python qui enl\u00e8ve et renvoie le dernier \u00e9l\u00e9ment d'une 'list'bksl-nlbksl-nldef afficherpy-undfile(file):bksl-nl \"\"\"bksl-nl Afficher file dans la consolebksl-nl \"\"\"bksl-nl print('->'.join(map(str,file)))bksl-nl#--- HDR ---#bksl-nldef longueur(file):bksl-nl compteur = 0bksl-nl while not estpy-undvide(file):bksl-nl defiler(file)bksl-nl compteur += 1bksl-nl return compteurbksl-nlbksl-nlF = creerpy-undfilepy-undvide() #une file videbksl-nlenfiler(F,3) # j'enfile le nombre 3 dans Fbksl-nlenfiler(F,5) # j'enfile le nombre 5 dans Fbksl-nlenfiler(F,2)bksl-nlenfiler(F,8)bksl-nlprint(\"longueur :\",longueur(F))bksl-nl A Z Chercher \u2693\ufe0e Pour chercher si une cible est dans une file, on initialise une variable trouve \u00e0 False . Cela signifie qu'on n'a pas encore trouv\u00e9 l'\u00e9l\u00e9ment dans la file. Ensuite on utilise une boucle TANT QUE. TANT QUE on n'a pas trouv\u00e9 ET que la file n'est pas vide, on d\u00e9file l'\u00e9lement de t\u00eate et on l'examine SI cet \u00e9l\u00e9ment est \u00e9gal \u00e0 cible . Si il l'est, on affecte True \u00e0 la variable trouve . Apr\u00e8s la boucle TANT QUE, on renvoie la valeur de trouve . Ci-dessous, une fonction Python chercher(file,cible) qui impl\u00e9mente cet algorithme. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder #--- HDR ---#bksl-nldef creerpy-undfilepy-undvide():bksl-nl \"\"\"bksl-nl Renvoie une file videbksl-nl \"\"\"bksl-nl return []bksl-nlbksl-nldef estpy-undvide(file):bksl-nl \"\"\"bksl-nl Renvoie True si file est vide, sinon renvoie Falsebksl-nl \"\"\"bksl-nl return len(file) == 0bksl-nlbksl-nldef enfiler(file,item):bksl-nl \"\"\"bksl-nl Emfile item \u00e0 la fin de file bksl-nl \"\"\"bksl-nl file.append(item)bksl-nl bksl-nldef defiler(file):bksl-nl \"\"\"bksl-nl D\u00e9file la file et renvoie l'\u00e9l\u00e9ment enlev\u00e9bksl-nl \"\"\"bksl-nl assert not estpy-undvide(file),\"on ne peut pas d\u00e9filer une file vide\"bksl-nl return file.pop(0)bksl-nlbksl-nldef afficherpy-undfile(file):bksl-nl \"\"\"bksl-nl Afficher file dans la consolebksl-nl \"\"\"bksl-nl print('->'.join(map(str,file)))bksl-nl#--- HDR ---#bksl-nldef chercher(file,cible):bksl-nl trouve = Falsebksl-nl while (not trouve) and (not estpy-undvide(file)):bksl-nl e = defiler(file)bksl-nl if e == cible:bksl-nl trouve = Truebksl-nl return trouvebksl-nl A Z","title":"Parcourir une file"},{"location":"TNSI/01ListesPilesFiles/010Files/02Parcourir/#parcourir-une-file","text":"Une file ne contient que quatre op\u00e9rations (ou fonctions) \u00e9l\u00e9mentaires. En particulier, il n'y a pas de fonction longueur pour calculer le nombre d'\u00e9l\u00e9ments d'une file. Mais parfois on peut avoir besoin de plus. Le mod\u00e8le \u00e0 suivre pour \u00e9tudier une file est de d\u00e9filer un \u00e0 un les \u00e9l\u00e9ments jusqu'\u00e0 obtenir ce qu'on veut ou que la file soit vide. \u00c0 noter que lorsqu'on d\u00e9file un \u00e9l\u00e9ment, on l'enl\u00e8ve de la file. Programmons deux nouvelles fonctions : calculer la longueur d'une file et chercher si un \u00e9l\u00e9ment est dans une file.","title":"Parcourir une file"},{"location":"TNSI/01ListesPilesFiles/010Files/02Parcourir/#longueur","text":"Pour calculer la longueur d'une file, on initialise un compteur \u00e0 z\u00e9ro. Puis, TANT QUE la file n'est pas vide, on d\u00e9file l'\u00e9l\u00e9ment de t\u00eate et on ajoute un au compteur. Ci-dessous, une fonction Python longueur qui calcule la longueur d'une file donn\u00e9e en param\u00e8tre. \u00c9tudiez bien son code pour le comprendre. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder #--- HDR ---#bksl-nldef creerpy-undfilepy-undvide():bksl-nl \"\"\"bksl-nl Renvoie une file videbksl-nl \"\"\"bksl-nl return []bksl-nlbksl-nldef estpy-undvide(file):bksl-nl \"\"\"bksl-nl Renvoie True si file est vide, sinon renvoie Falsebksl-nl \"\"\"bksl-nl return len(file) == 0bksl-nlbksl-nldef enfiler(file,item):bksl-nl \"\"\"bksl-nl Emfile item \u00e0 la fin de file bksl-nl \"\"\"bksl-nl file.append(item)bksl-nl bksl-nldef defiler(file):bksl-nl \"\"\"bksl-nl D\u00e9file la file et renvoie l'\u00e9l\u00e9ment enlev\u00e9bksl-nl \"\"\"bksl-nl assert not estpy-undvide(file),\"on ne peut pas d\u00e9filer une file vide\"bksl-nl return file.pop(0) #fonction Python qui enl\u00e8ve et renvoie le dernier \u00e9l\u00e9ment d'une 'list'bksl-nlbksl-nldef afficherpy-undfile(file):bksl-nl \"\"\"bksl-nl Afficher file dans la consolebksl-nl \"\"\"bksl-nl print('->'.join(map(str,file)))bksl-nl#--- HDR ---#bksl-nldef longueur(file):bksl-nl compteur = 0bksl-nl while not estpy-undvide(file):bksl-nl defiler(file)bksl-nl compteur += 1bksl-nl return compteurbksl-nlbksl-nlF = creerpy-undfilepy-undvide() #une file videbksl-nlenfiler(F,3) # j'enfile le nombre 3 dans Fbksl-nlenfiler(F,5) # j'enfile le nombre 5 dans Fbksl-nlenfiler(F,2)bksl-nlenfiler(F,8)bksl-nlprint(\"longueur :\",longueur(F))bksl-nl A Z","title":"Longueur"},{"location":"TNSI/01ListesPilesFiles/010Files/02Parcourir/#chercher","text":"Pour chercher si une cible est dans une file, on initialise une variable trouve \u00e0 False . Cela signifie qu'on n'a pas encore trouv\u00e9 l'\u00e9l\u00e9ment dans la file. Ensuite on utilise une boucle TANT QUE. TANT QUE on n'a pas trouv\u00e9 ET que la file n'est pas vide, on d\u00e9file l'\u00e9lement de t\u00eate et on l'examine SI cet \u00e9l\u00e9ment est \u00e9gal \u00e0 cible . Si il l'est, on affecte True \u00e0 la variable trouve . Apr\u00e8s la boucle TANT QUE, on renvoie la valeur de trouve . Ci-dessous, une fonction Python chercher(file,cible) qui impl\u00e9mente cet algorithme. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder #--- HDR ---#bksl-nldef creerpy-undfilepy-undvide():bksl-nl \"\"\"bksl-nl Renvoie une file videbksl-nl \"\"\"bksl-nl return []bksl-nlbksl-nldef estpy-undvide(file):bksl-nl \"\"\"bksl-nl Renvoie True si file est vide, sinon renvoie Falsebksl-nl \"\"\"bksl-nl return len(file) == 0bksl-nlbksl-nldef enfiler(file,item):bksl-nl \"\"\"bksl-nl Emfile item \u00e0 la fin de file bksl-nl \"\"\"bksl-nl file.append(item)bksl-nl bksl-nldef defiler(file):bksl-nl \"\"\"bksl-nl D\u00e9file la file et renvoie l'\u00e9l\u00e9ment enlev\u00e9bksl-nl \"\"\"bksl-nl assert not estpy-undvide(file),\"on ne peut pas d\u00e9filer une file vide\"bksl-nl return file.pop(0)bksl-nlbksl-nldef afficherpy-undfile(file):bksl-nl \"\"\"bksl-nl Afficher file dans la consolebksl-nl \"\"\"bksl-nl print('->'.join(map(str,file)))bksl-nl#--- HDR ---#bksl-nldef chercher(file,cible):bksl-nl trouve = Falsebksl-nl while (not trouve) and (not estpy-undvide(file)):bksl-nl e = defiler(file)bksl-nl if e == cible:bksl-nl trouve = Truebksl-nl return trouvebksl-nl A Z","title":"Chercher"},{"location":"TNSI/01ListesPilesFiles/020Piles/00Introduction/","text":"Observation \u2693\ufe0e Margaret Hamilton a dirig\u00e9 l'\u00e9quipe de programmation de l' Apollo Guidance Computer , l'ordinateur de bord du vaisseau qui a pour la premi\u00e8re fois amen\u00e9 des \u00eatres humains sur la Lune. Elle pose ici, en 1969, avec le code source du logiciel de navigation, imprim\u00e9 dans des livres. Elle pense qu'il y a un bug quelque part dans le quatri\u00e8me livre. Comment va-t-elle y acc\u00e9der ? Quelle diff\u00e9rence y a-t-il dans l'organisation des gens entre l'image de gauche et celle de droite ?","title":"Observation"},{"location":"TNSI/01ListesPilesFiles/020Piles/00Introduction/#observation","text":"Margaret Hamilton a dirig\u00e9 l'\u00e9quipe de programmation de l' Apollo Guidance Computer , l'ordinateur de bord du vaisseau qui a pour la premi\u00e8re fois amen\u00e9 des \u00eatres humains sur la Lune. Elle pose ici, en 1969, avec le code source du logiciel de navigation, imprim\u00e9 dans des livres. Elle pense qu'il y a un bug quelque part dans le quatri\u00e8me livre. Comment va-t-elle y acc\u00e9der ? Quelle diff\u00e9rence y a-t-il dans l'organisation des gens entre l'image de gauche et celle de droite ?","title":"Observation"},{"location":"TNSI/01ListesPilesFiles/020Piles/01Definition/","text":"D\u00e9finition \u2693\ufe0e Comme les files, les piles sont des structures de donn\u00e9es lin\u00e9aires : des \u00e9l\u00e9ments sont plac\u00e9s les uns \u00e0 la suite des autres. Comme pour les files, pour examiner un \u00e9l\u00e9ment d'une pile, il faut l'enlever. La diff\u00e9rence est que, dans une pile, l'\u00e9l\u00e9ment enlev\u00e9 est celui qui est en haut de la pile, c'est-\u00e0-dire le dernier qui a \u00e9t\u00e9 pos\u00e9 sur la pile. Une pile suit le principe FILO ( First In, Last Out ) : premier arriv\u00e9, dernier sorti . Pile : d\u00e9finition Une pile est constitu\u00e9e d'\u00e9l\u00e9ments plac\u00e9s les uns \"sur\" les autres. Elle peut \u00e9ventuellement \u00eatre vide. On peut faire quatre op\u00e9rations sur une file : cr\u00e9er une pile vide ; tester si une pile est vide ; ajouter un \u00e9l\u00e9ment au sommet de la pile : on dit empiler ; enlever l'\u00e9l\u00e9ment qui en haut de la file (donc le dernier ajout\u00e9) : d\u00e9piler . Un exemple en informatique : l'historique En informatique, on utilise les piles pour enregistrer un historique. Supposons qu'un logiciel de traitement de textes enregistre chaque mot qu'on tape dans une pile d'historique. Si on tape \"Salut les gens\", il va ex\u00e9cuter l'algorithme suivant : cr\u00e9er une pile vide HISTORIQUE empiler \"Salut\" sur HISTORIQUE empiler \"les\" sur HISTORIQUE empiler \"gens\" sur HISTORIQUE on obtient la pile : classDiagram class HISTORIQUE{ gens les Salut } Si on appuie sur Ctrl \uff0b Z , cela revient \u00e0 : d\u00e9piler HISTORIQUE et on obtient : classDiagram class HISTORIQUE{ les Salut } Si maintenant on \u00e9crit \"amis\" dans ce logiciel, cela ex\u00e9cute empiler \"amis\" sur HISTORIQUE et la pile devient : classDiagram class HISTORIQUE{ amis les Salut }","title":"D\u00e9finition"},{"location":"TNSI/01ListesPilesFiles/020Piles/01Definition/#definition","text":"Comme les files, les piles sont des structures de donn\u00e9es lin\u00e9aires : des \u00e9l\u00e9ments sont plac\u00e9s les uns \u00e0 la suite des autres. Comme pour les files, pour examiner un \u00e9l\u00e9ment d'une pile, il faut l'enlever. La diff\u00e9rence est que, dans une pile, l'\u00e9l\u00e9ment enlev\u00e9 est celui qui est en haut de la pile, c'est-\u00e0-dire le dernier qui a \u00e9t\u00e9 pos\u00e9 sur la pile. Une pile suit le principe FILO ( First In, Last Out ) : premier arriv\u00e9, dernier sorti . Pile : d\u00e9finition Une pile est constitu\u00e9e d'\u00e9l\u00e9ments plac\u00e9s les uns \"sur\" les autres. Elle peut \u00e9ventuellement \u00eatre vide. On peut faire quatre op\u00e9rations sur une file : cr\u00e9er une pile vide ; tester si une pile est vide ; ajouter un \u00e9l\u00e9ment au sommet de la pile : on dit empiler ; enlever l'\u00e9l\u00e9ment qui en haut de la file (donc le dernier ajout\u00e9) : d\u00e9piler . Un exemple en informatique : l'historique En informatique, on utilise les piles pour enregistrer un historique. Supposons qu'un logiciel de traitement de textes enregistre chaque mot qu'on tape dans une pile d'historique. Si on tape \"Salut les gens\", il va ex\u00e9cuter l'algorithme suivant : cr\u00e9er une pile vide HISTORIQUE empiler \"Salut\" sur HISTORIQUE empiler \"les\" sur HISTORIQUE empiler \"gens\" sur HISTORIQUE on obtient la pile : classDiagram class HISTORIQUE{ gens les Salut } Si on appuie sur Ctrl \uff0b Z , cela revient \u00e0 : d\u00e9piler HISTORIQUE et on obtient : classDiagram class HISTORIQUE{ les Salut } Si maintenant on \u00e9crit \"amis\" dans ce logiciel, cela ex\u00e9cute empiler \"amis\" sur HISTORIQUE et la pile devient : classDiagram class HISTORIQUE{ amis les Salut }","title":"D\u00e9finition"},{"location":"TNSI/02POO/00Probleme/","text":"Un petit bonjour \u2693\ufe0e \u00c9tudions un exemple tr\u00e8s simple, celui qu'on voit souvent dans la toute premi\u00e8re le\u00e7on quand on apprend \u00e0 programmer en Python : \ud83d\udc0d Script Python \"Bonjour !\" Quand on tape ce code dans un \u00e9diteur Python et qu'on l'ex\u00e9cute, on ne cr\u00e9\u00e9 pas seulement une cha\u00eene de 9 caract\u00e8res, on cr\u00e9\u00e9 un objet de la classe str . Qu'y a-t-il dans cet objet ? Pour le savoir, tapez dir(\"Bonjour !\") dans la console, puis Enter >>> Tous les objets d'une classe, m\u00eame s'ils sont diff\u00e9rents, sont automatiquement cr\u00e9\u00e9s avec des fonctions (ou m\u00e9thodes ) et des valeurs (ou attributs ) embarqu\u00e9es (on dit encapsul\u00e9es ). La fonction python dir renvoie la liste de toutes les m\u00e9thodes et tous les attributs encapsul\u00e9s dans un objet. On acc\u00e8de \u00e0 une m\u00e9thode ou un attribut sous la forme <objet>.<m\u00e9thode> avec un point entre l'objet et la m\u00e9thode. Par exemple, essayez dans la console : pour appliquer la m\u00e9thode lower \u00e0 \"OK\" , tapez \"OK\".lower() pour avoir l'aide de la m\u00e9thode lower qui est encapsul\u00e9e dans \"Bonjour !\" , tapez help(\"Bonjour !\".lower) . Cela affichera le docstring de cette m\u00e9thode, en anglais (\"lowercase\" signifie \"en minuscule\"). L'id\u00e9e de la programmation orient\u00e9e objet est de faire en sorte que, d\u00e8s sa cr\u00e9ation, un objet partage des caract\u00e9ristiques communes avec tous ceux de sa classe et qu'il contienne \"tout ce dont il a besoin\" pour \u00e9voluer.","title":"Un petit bonjour"},{"location":"TNSI/02POO/00Probleme/#un-petit-bonjour","text":"\u00c9tudions un exemple tr\u00e8s simple, celui qu'on voit souvent dans la toute premi\u00e8re le\u00e7on quand on apprend \u00e0 programmer en Python : \ud83d\udc0d Script Python \"Bonjour !\" Quand on tape ce code dans un \u00e9diteur Python et qu'on l'ex\u00e9cute, on ne cr\u00e9\u00e9 pas seulement une cha\u00eene de 9 caract\u00e8res, on cr\u00e9\u00e9 un objet de la classe str . Qu'y a-t-il dans cet objet ? Pour le savoir, tapez dir(\"Bonjour !\") dans la console, puis Enter >>> Tous les objets d'une classe, m\u00eame s'ils sont diff\u00e9rents, sont automatiquement cr\u00e9\u00e9s avec des fonctions (ou m\u00e9thodes ) et des valeurs (ou attributs ) embarqu\u00e9es (on dit encapsul\u00e9es ). La fonction python dir renvoie la liste de toutes les m\u00e9thodes et tous les attributs encapsul\u00e9s dans un objet. On acc\u00e8de \u00e0 une m\u00e9thode ou un attribut sous la forme <objet>.<m\u00e9thode> avec un point entre l'objet et la m\u00e9thode. Par exemple, essayez dans la console : pour appliquer la m\u00e9thode lower \u00e0 \"OK\" , tapez \"OK\".lower() pour avoir l'aide de la m\u00e9thode lower qui est encapsul\u00e9e dans \"Bonjour !\" , tapez help(\"Bonjour !\".lower) . Cela affichera le docstring de cette m\u00e9thode, en anglais (\"lowercase\" signifie \"en minuscule\"). L'id\u00e9e de la programmation orient\u00e9e objet est de faire en sorte que, d\u00e8s sa cr\u00e9ation, un objet partage des caract\u00e9ristiques communes avec tous ceux de sa classe et qu'il contienne \"tout ce dont il a besoin\" pour \u00e9voluer.","title":"Un petit bonjour"},{"location":"TNSI/02POO/01Perso/","text":"Cr\u00e9ation d'une classe Perso \u2693\ufe0e Nous voudrions cr\u00e9er une classe de personnages tr\u00e8s simple pour un jeu vid\u00e9o selon le sch\u00e9ma suivant : classDiagram class Perso{ pseudo score se_presenter() } On voudrait que chaque personnage ait trois attributs : pseudo de type str : le pseudonyme du personnage, \u00e0 d\u00e9finir \u00e0 la cr\u00e9ation ; score de type int (nombre entier) : le score du personnage, \u00e9gal \u00e0 z\u00e9ro \u00e0 la cr\u00e9ation. Chaque personnage a \u00e9galement une m\u00e9thode se_presenter() : c'est une fonction qui renvoie un texte de pr\u00e9sentation du personnage. Nous allons cr\u00e9er et compl\u00e9ter la classe peu \u00e0 peu dans l'IDE ci-dessous. Lisez attentivement le texte et recopiez les exemples de code dans l'IDE. \u00c9vitez les copier-coller ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder . Tapez le code suivant puis ex\u00e9cutez le programme. \ud83d\udc0d Script Python class Perso : def __init__ ( self ): self . score = 0 En apparence, il ne s'est rien pass\u00e9, mais on a cr\u00e9\u00e9 une classe Perso . Important On cr\u00e9e une classe avec le mot-cl\u00e9 Python class suivi du nom de la classe et d'un deux-points. Par convention, le nom d'une classe commence par une majuscule alors que les noms de variables sont en minuscules. Dans la classe, avec la syntaxe habituelle des fonctions, on cr\u00e9\u00e9 des m\u00e9thodes. Ici a \u00e9t\u00e9 cr\u00e9\u00e9e la m\u00e9thode __init__ (avec deux tirets bas de chaque c\u00f4t\u00e9) et un param\u00e8tre self . Ex\u00e9cutez les instructions suivantes dans la console : \ud83d\udc0d Script Python moi = Perso () print ( moi . score ) Nous venons de cr\u00e9er un objet de la classe Perso . Important Lors de la cr\u00e9ation d'un objet, Python appelle toujours la fonction __init__ . Le mot-cl\u00e9 self , qui veut-dire \"soi-m\u00eame\" en anglais, fait r\u00e9f\u00e9rence \u00e0 l'objet qui est cr\u00e9\u00e9. Ici, lors de la cr\u00e9ation d'un Perso , on attribue automatiquement la valeur 0 \u00e0 son attribut score . La cr\u00e9ation d'un objet fait appel \u00e0 une fonction, il est possible d'ajouter de multiples instructions dans cette fonction constructeur, comme dans n'importe quelle fonction Python. Par exemple, pr\u00e9venons que la cr\u00e9ation s'est bien pass\u00e9e. Remplacez le code de l'\u00e9diteur par celui-ci et ex\u00e9cutez-le : \ud83d\udc0d Script Python class Perso : def __init__ ( self ): self . score = 0 print ( \"Perso cr\u00e9\u00e9.\" ) moi = Perso () On peut lire ou modifier un attribut d'un objet avec la syntaxe \"point\" nom_objet.nom_attribut , ici moi.score . Essayez : \ud83d\udc0d Script Python moi . score = 12 print ( moi . score ) Il est possible de forcer le passage de param\u00e8tres \u00e0 la cr\u00e9ation de l'objet. Par exemple, pour rendre obligatoire de donner un pseudo lorsqu'on cr\u00e9e un Perso : \ud83d\udc0d Script Python class Perso : def __init__ ( self , pseudo ): self . score = 0 self . pseudo = pseudo print ( \"Perso\" , self . pseudo , \"cr\u00e9\u00e9\" ) moi = Perso ( \"Mimi\" ) Important Tous les objets d'une m\u00eame classe partagent des fonctions, communes, appel\u00e9s m\u00e9thodes . On d\u00e9finit une m\u00e9thode comme toute fonction, mais son premier param\u00e8tre doit \u00eatre le mot-cl\u00e9 self , qui fait r\u00e9f\u00e9rence \u00e0 l'objet lui-m\u00eame. Cr\u00e9ons maintenant notre premi\u00e8re m\u00e9thode : se_presenter . \ud83d\udc0d Script Python class Perso : def __init__ ( self , pseudo ): self . score = 0 self . pseudo = pseudo def se_presenter ( self ): return \"Bonjour, je m'appelle \" + self . pseudo + \" !\" toi = Perso ( \"Momo\" ) pres = toi . se_presenter () print ( pres ) Important Quand on ex\u00e9cute une m\u00e9thode d'un objet, il ne faut pas inclure le mot-cl\u00e9 self , celui-ci sert uniquement \u00e0 pouvoir utiliser le point pour appeler la fonction, et acc\u00e9der \u00e0 d'autres attributs ou m\u00e9thodes. Par contre il est obligatoire en premier lors de la d\u00e9finition de la m\u00e9thode dans la classe. Dans notre exemple, la m\u00e9thode se_presenter utilise self.pseudo . Le mot-cl\u00e9 self permet de dire \u00e0 l'objet python \"utilise le pseudo de toi-m\u00eame\", pas celui d'un autre.","title":"Cr\u00e9ation d'une classe `Perso`"},{"location":"TNSI/02POO/01Perso/#creation-dune-classe-perso","text":"Nous voudrions cr\u00e9er une classe de personnages tr\u00e8s simple pour un jeu vid\u00e9o selon le sch\u00e9ma suivant : classDiagram class Perso{ pseudo score se_presenter() } On voudrait que chaque personnage ait trois attributs : pseudo de type str : le pseudonyme du personnage, \u00e0 d\u00e9finir \u00e0 la cr\u00e9ation ; score de type int (nombre entier) : le score du personnage, \u00e9gal \u00e0 z\u00e9ro \u00e0 la cr\u00e9ation. Chaque personnage a \u00e9galement une m\u00e9thode se_presenter() : c'est une fonction qui renvoie un texte de pr\u00e9sentation du personnage. Nous allons cr\u00e9er et compl\u00e9ter la classe peu \u00e0 peu dans l'IDE ci-dessous. Lisez attentivement le texte et recopiez les exemples de code dans l'IDE. \u00c9vitez les copier-coller ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder . Tapez le code suivant puis ex\u00e9cutez le programme. \ud83d\udc0d Script Python class Perso : def __init__ ( self ): self . score = 0 En apparence, il ne s'est rien pass\u00e9, mais on a cr\u00e9\u00e9 une classe Perso . Important On cr\u00e9e une classe avec le mot-cl\u00e9 Python class suivi du nom de la classe et d'un deux-points. Par convention, le nom d'une classe commence par une majuscule alors que les noms de variables sont en minuscules. Dans la classe, avec la syntaxe habituelle des fonctions, on cr\u00e9\u00e9 des m\u00e9thodes. Ici a \u00e9t\u00e9 cr\u00e9\u00e9e la m\u00e9thode __init__ (avec deux tirets bas de chaque c\u00f4t\u00e9) et un param\u00e8tre self . Ex\u00e9cutez les instructions suivantes dans la console : \ud83d\udc0d Script Python moi = Perso () print ( moi . score ) Nous venons de cr\u00e9er un objet de la classe Perso . Important Lors de la cr\u00e9ation d'un objet, Python appelle toujours la fonction __init__ . Le mot-cl\u00e9 self , qui veut-dire \"soi-m\u00eame\" en anglais, fait r\u00e9f\u00e9rence \u00e0 l'objet qui est cr\u00e9\u00e9. Ici, lors de la cr\u00e9ation d'un Perso , on attribue automatiquement la valeur 0 \u00e0 son attribut score . La cr\u00e9ation d'un objet fait appel \u00e0 une fonction, il est possible d'ajouter de multiples instructions dans cette fonction constructeur, comme dans n'importe quelle fonction Python. Par exemple, pr\u00e9venons que la cr\u00e9ation s'est bien pass\u00e9e. Remplacez le code de l'\u00e9diteur par celui-ci et ex\u00e9cutez-le : \ud83d\udc0d Script Python class Perso : def __init__ ( self ): self . score = 0 print ( \"Perso cr\u00e9\u00e9.\" ) moi = Perso () On peut lire ou modifier un attribut d'un objet avec la syntaxe \"point\" nom_objet.nom_attribut , ici moi.score . Essayez : \ud83d\udc0d Script Python moi . score = 12 print ( moi . score ) Il est possible de forcer le passage de param\u00e8tres \u00e0 la cr\u00e9ation de l'objet. Par exemple, pour rendre obligatoire de donner un pseudo lorsqu'on cr\u00e9e un Perso : \ud83d\udc0d Script Python class Perso : def __init__ ( self , pseudo ): self . score = 0 self . pseudo = pseudo print ( \"Perso\" , self . pseudo , \"cr\u00e9\u00e9\" ) moi = Perso ( \"Mimi\" ) Important Tous les objets d'une m\u00eame classe partagent des fonctions, communes, appel\u00e9s m\u00e9thodes . On d\u00e9finit une m\u00e9thode comme toute fonction, mais son premier param\u00e8tre doit \u00eatre le mot-cl\u00e9 self , qui fait r\u00e9f\u00e9rence \u00e0 l'objet lui-m\u00eame. Cr\u00e9ons maintenant notre premi\u00e8re m\u00e9thode : se_presenter . \ud83d\udc0d Script Python class Perso : def __init__ ( self , pseudo ): self . score = 0 self . pseudo = pseudo def se_presenter ( self ): return \"Bonjour, je m'appelle \" + self . pseudo + \" !\" toi = Perso ( \"Momo\" ) pres = toi . se_presenter () print ( pres ) Important Quand on ex\u00e9cute une m\u00e9thode d'un objet, il ne faut pas inclure le mot-cl\u00e9 self , celui-ci sert uniquement \u00e0 pouvoir utiliser le point pour appeler la fonction, et acc\u00e9der \u00e0 d'autres attributs ou m\u00e9thodes. Par contre il est obligatoire en premier lors de la d\u00e9finition de la m\u00e9thode dans la classe. Dans notre exemple, la m\u00e9thode se_presenter utilise self.pseudo . Le mot-cl\u00e9 self permet de dire \u00e0 l'objet python \"utilise le pseudo de toi-m\u00eame\", pas celui d'un autre.","title":"Cr\u00e9ation d'une classe Perso"},{"location":"TNSI/03Recursivite/","text":"R\u00e9cursivit\u00e9 \u2693\ufe0e","title":"R\u00e9cursivit\u00e9"},{"location":"TNSI/03Recursivite/#recursivite","text":"","title":"R\u00e9cursivit\u00e9"},{"location":"TNSI/04ArbresBinaires/","text":"Arbres binaires \u2693\ufe0e","title":"Arbres binaires"},{"location":"TNSI/04ArbresBinaires/#arbres-binaires","text":"","title":"Arbres binaires"},{"location":"xtra/end_REM/","text":"Z","title":"end REM"},{"location":"xtra/start_REM/","text":"A","title":"start REM"}]}