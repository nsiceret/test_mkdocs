{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours de NSI ! \u2693\ufe0e bient\u00f4t ici NSI en premi\u00e8re \u2693\ufe0e lien NSI en terminale \u2693\ufe0e lien Section euro ? \u2693\ufe0e ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder","title":"Accueil"},{"location":"#cours-de-nsi","text":"bient\u00f4t ici","title":"Cours de NSI !"},{"location":"#nsi-en-premiere","text":"lien","title":"NSI en premi\u00e8re"},{"location":"#nsi-en-terminale","text":"lien","title":"NSI en terminale"},{"location":"#section-euro","text":"### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder","title":"Section euro ?"},{"location":"1NSI/","text":"NSI en premi\u00e8re \u2693\ufe0e 01. Bases de la programmation \u2693\ufe0e Pour cette partie, nous utiliserons des jeux interactifs pour apprendre ou revoir les bases de la programmation en Python. Rendez-vous sur la page d\u00e9di\u00e9e 02. Architecture d'un ordinateur \u2693\ufe0e Qu'est-ce qu'un ordinateur ? Quel est le d\u00e9roulement d'un programme en langage machine ? Rendez-vous sur la page d\u00e9di\u00e9e","title":"NSI en premi\u00e8re"},{"location":"1NSI/#nsi-en-premiere","text":"","title":"NSI en premi\u00e8re"},{"location":"1NSI/#01-bases-de-la-programmation","text":"Pour cette partie, nous utiliserons des jeux interactifs pour apprendre ou revoir les bases de la programmation en Python. Rendez-vous sur la page d\u00e9di\u00e9e","title":"01. Bases de la programmation"},{"location":"1NSI/#02-architecture-dun-ordinateur","text":"Qu'est-ce qu'un ordinateur ? Quel est le d\u00e9roulement d'un programme en langage machine ? Rendez-vous sur la page d\u00e9di\u00e9e","title":"02. Architecture d'un ordinateur"},{"location":"1NSI/01BasesProgrammation/","text":"01. Bases de la programmation \u2693\ufe0e Sur le site de France-IOI votre mission sera d'aider des extraterrestres gr\u00e2ce \u00e0 votre robot. Les explications pour cr\u00e9er un compte seront donn\u00e9es en classe. Le site Py-rates est un autre site d'apprentissage de programmation, mais cette fois-ci le jeu consiste \u00e0 aider des pirates.","title":"01. Bases de la programmation"},{"location":"1NSI/01BasesProgrammation/#01-bases-de-la-programmation","text":"Sur le site de France-IOI votre mission sera d'aider des extraterrestres gr\u00e2ce \u00e0 votre robot. Les explications pour cr\u00e9er un compte seront donn\u00e9es en classe. Le site Py-rates est un autre site d'apprentissage de programmation, mais cette fois-ci le jeu consiste \u00e0 aider des pirates.","title":"01. Bases de la programmation"},{"location":"1NSI/02ArchitectureOrdinateur/","text":"02. Architecture d'un ordinateur \u2693\ufe0e Le mod\u00e8le de von Neumann \u2693\ufe0e Presque tous les ordinateurs fonctionnent selon le m\u00eame mod\u00e8le, appel\u00e9 mod\u00e8le de von Neumann . \u00c0 faire dans ce chapitre : des activit\u00e9s Capytale bas\u00e9es sur des vid\u00e9os ou des recherches. Ordinateur, tout un programme , C'est pas Sorcier How Computers Work: CPU, Memory, Input and Ouput , Code.org Le binaire Le langage machine \u2693\ufe0e Pour cette partie, nous utiliserons un simulateur d'ordinateur en ligne appel\u00e9 VIC ( VIsual Computer ). L'objectif est de voir comment fonctionne le mod\u00e8le de von Neumann. VIC en ligne Les explications sur son fonctionnement Exercices : programmez vous-m\u00eame dans VIC. Les \"vrais\" ordinateurs \u2693\ufe0e Le tableau ci-dessous compare VIC avec un ordinateur moyen d'aujourd'hui. VIC Ordinateur 1 registre de donn\u00e9es 32 registres de donn\u00e9es mots de 3 chiffres d\u00e9cimaux mots de 64 bits 100 cases m\u00e9moire des milliards de cases m\u00e9moire 1 m\u00e9moire plusieurs m\u00e9moires : RAM, ROM, m\u00e9moire cache... pas de stockage stockage sur disque dur, m\u00e9moire flash... 1 port d'entr\u00e9e clavier, souris, disk, ports r\u00e9seau... 1 port de sortie \u00e9cran, hauts-parleurs, disques, r\u00e9seau... 1 processeur plusieurs processeurs, parfois GPU (processeur d\u00e9di\u00e9 aux graphiques) 10 instructions en langage machine quelques centaines d'instructions 1 programme plusieurs programmes ex\u00e9cut\u00e9s \"en m\u00eame temps\" (ou presque) 1 instruction \u00e0 la fois ex\u00e9cution en parall\u00e8le","title":"02. Architecture d'un ordinateur"},{"location":"1NSI/02ArchitectureOrdinateur/#02-architecture-dun-ordinateur","text":"","title":"02. Architecture d'un ordinateur"},{"location":"1NSI/02ArchitectureOrdinateur/#le-modele-de-von-neumann","text":"Presque tous les ordinateurs fonctionnent selon le m\u00eame mod\u00e8le, appel\u00e9 mod\u00e8le de von Neumann . \u00c0 faire dans ce chapitre : des activit\u00e9s Capytale bas\u00e9es sur des vid\u00e9os ou des recherches. Ordinateur, tout un programme , C'est pas Sorcier How Computers Work: CPU, Memory, Input and Ouput , Code.org Le binaire","title":"Le mod\u00e8le de von Neumann"},{"location":"1NSI/02ArchitectureOrdinateur/#le-langage-machine","text":"Pour cette partie, nous utiliserons un simulateur d'ordinateur en ligne appel\u00e9 VIC ( VIsual Computer ). L'objectif est de voir comment fonctionne le mod\u00e8le de von Neumann. VIC en ligne Les explications sur son fonctionnement Exercices : programmez vous-m\u00eame dans VIC.","title":"Le langage machine"},{"location":"1NSI/02ArchitectureOrdinateur/#les-vrais-ordinateurs","text":"Le tableau ci-dessous compare VIC avec un ordinateur moyen d'aujourd'hui. VIC Ordinateur 1 registre de donn\u00e9es 32 registres de donn\u00e9es mots de 3 chiffres d\u00e9cimaux mots de 64 bits 100 cases m\u00e9moire des milliards de cases m\u00e9moire 1 m\u00e9moire plusieurs m\u00e9moires : RAM, ROM, m\u00e9moire cache... pas de stockage stockage sur disque dur, m\u00e9moire flash... 1 port d'entr\u00e9e clavier, souris, disk, ports r\u00e9seau... 1 port de sortie \u00e9cran, hauts-parleurs, disques, r\u00e9seau... 1 processeur plusieurs processeurs, parfois GPU (processeur d\u00e9di\u00e9 aux graphiques) 10 instructions en langage machine quelques centaines d'instructions 1 programme plusieurs programmes ex\u00e9cut\u00e9s \"en m\u00eame temps\" (ou presque) 1 instruction \u00e0 la fois ex\u00e9cution en parall\u00e8le","title":"Les \"vrais\" ordinateurs"},{"location":"1NSI/02ArchitectureOrdinateur/02ExercicesVIC/","text":"Exercices avec VIC \u2693\ufe0e Entr\u00e9e, sortie et m\u00e9moire \u2693\ufe0e Addition et soustraction \u2693\ufe0e Contr\u00f4le de flux \u2693\ufe0e","title":"Exercices avec VIC"},{"location":"1NSI/02ArchitectureOrdinateur/02ExercicesVIC/#exercices-avec-vic","text":"","title":"Exercices avec VIC"},{"location":"1NSI/02ArchitectureOrdinateur/02ExercicesVIC/#entree-sortie-et-memoire","text":"","title":"Entr\u00e9e, sortie et m\u00e9moire"},{"location":"1NSI/02ArchitectureOrdinateur/02ExercicesVIC/#addition-et-soustraction","text":"","title":"Addition et soustraction"},{"location":"1NSI/02ArchitectureOrdinateur/02ExercicesVIC/#controle-de-flux","text":"","title":"Contr\u00f4le de flux"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/","text":"Comment utiliser VIC \u2693\ufe0e VIC (Visual Computer) est un ordinateur minimal utilisable en ligne pour simuler le langage machine . Il comporte tr\u00e8s peu de composants et ne comprend qu'un nombre tr\u00e8s r\u00e9duit d'instructions. Cette simplification permet de comprendre le mod\u00e8le de von Neumann et les bases du langage machine . Dans VIC , toutes les donn\u00e9es sont des nombres entiers \u00e0 trois chiffres (de -999 \u00e0 999). Architecture \u2693\ufe0e L'interface de VIC est compos\u00e9e de trois parties, elles-m\u00eames partag\u00e9es en plusieurs composants : les composants d'entr\u00e9e/sortie ( I/O Units ), avec : un composant d'entr\u00e9e ( Input ) dans lequel vous pourrez \u00e9crire des nombres pour tester vos programmes ; un composant de sortie ( Output ) dans lequel le programme peut \u00e9crire un nombre; un processeur ( CPU ), compos\u00e9 de : un registre d'instruction ( Instruction Register ) dans lequel est indiqu\u00e9e la prochaine instruction \u00e0 ex\u00e9cuter ; un registre de donn\u00e9es ( Data Register ) qui contient la donn\u00e9e \u00e0 traiter (VIC ne peut traiter qu'une donn\u00e9e \u00e0 la fois) ; un compteur ordinal ( Program Counter ) qui contient l'adresse en m\u00e9moire de l'instruction \u00e0 ex\u00e9cuter. une m\u00e9moire vive ( Memory ) compos\u00e9e de 100 cases m\u00e9moire ou cellules num\u00e9rot\u00e9es de 00 \u00e0 99. Instructions \u2693\ufe0e Comme les \"vrais\" ordinateurs, VIC ne conna\u00eet qu'un petit nombre d'instructions. Elles sont au nombre de dix. VIC commence son ex\u00e9cution avec l'instructions situ\u00e9e dans la case m\u00e9moire d'adresse 00. \u00c0 chaque \u00e9tape, il ex\u00e9cute l'instruction situ\u00e9e dans la case m\u00e9moire courante puis passe \u00e0 la suvante. Le programme s'arr\u00eate lorsqu'il rencontre une case m\u00e9moire vide ou, ce qui revient au m\u00eame, qui contient le nombre 0. Nous avons donc notre premi\u00e8re instruction en langage machine : 000 : STOP arr\u00eater le programme. Le langage machine \u2693\ufe0e Le langage machine est le langage compris par la machine au niveau des composants. Il s'exprime \u00e0 l'aide de nombres entiers. Pour faciliter le travail des humains, on utilse un langage appel\u00e9 assembleur qui consiste \u00e0 remplacer chaque nombre par une expression plus lisible. Entr\u00e9e-sortie \u2693\ufe0e VIC comprend deux instructions d'entr\u00e9e-sortie : 800 : LIRE la case courante de Input et mettre sa valeur dans le registre de donn\u00e9es 900 : \u00c9CRIRE la valeur du registre de donn\u00e9es dans la case suivante de Output Premier exemple : lire et afficher Un programme qui lit une donn\u00e9e puis l'\u00e9crit dans Ouput . Ce programme s'\u00e9crirait ainsi en assembleur : LIRE \u00c9CRIRE STOP ce qui donne, en langage machine de VIC : 800 900 000 Essayez ! Si vous \u00e9crivez n'importe quel nombre dans la premi\u00e8ce cellule de Input , ce programme va l'\u00e9crire dans Ouput . Pour que cela fonction, il faut \u00e9crire 800 dans la case m\u00e9moire d'adresse 00 et 900 dans celle d'adresse 01 . Dans la suite, nous ommettrons la ligne 000 STOP pour all\u00e9ger les programmes. Avec la m\u00e9moire \u2693\ufe0e Deux instructions permettent de travailler avec la m\u00e9moire vive : 3xx : CHARGER le contenu de la case m\u00e9moire dont l'adresse est xx (o\u00f9 xx repr\u00e9sente deux chiffres) dans le registre de donn\u00e9es depuis 4xx : ENREGISTRER le contenu du registre de donn\u00e9es dans la case m\u00e9moire dont l'adresse est xx. Affichage inverse On veut lire deux nombres, puis les afficher dans l'ordre inverse : d'abord le deuxi\u00e8me nombre entr\u00e9, puis le premier. Pour cela, il faut garder le premier nombre en m\u00e9moire, par exemple dans la case 10. En assembleur : LIRE ENREGISTRER dans la case m\u00e9moire 10 LIRE \u00c9CRIRE CHARGER le nombre de la case m\u00e9more 10 \u00c9CRIRE en langage machine de VIC : 800 410 800 900 310 900 Arithm\u00e9tique \u2693\ufe0e VIC ne conna\u00eet que deux op\u00e9rations : addition et soustraction. \u00c0 chaque fois, il travaille avec une case m\u00e9moire d'adresse xx et le registre de donn\u00e9es. 1xx : AJOUTER le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es ; 2xx : SOUSTRAIRE le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es. Attention L'ordre des nombres pour la soustraction est important. Addition Pour additionner deux nombres donn\u00e9s en entr\u00e9e, il faudra en enregistrer un en m\u00e9moire, par exemple dans la case 09. LIRE (le premier nombre) ENREGISTRER dans la case m\u00e9moire 09 LIRE (le deuxi\u00e8me) AJOUTER le nombre de la case 09 au registre de donn\u00e9es \u00c9CRIRE en langage machine : 800 409 800 109 900 Contr\u00f4le du flux \u2693\ufe0e Toutes les instructions conditionnelles et les boucles se font en langage machine avec des instructions de contr\u00f4le de flux qui consistent \u00e0 passer, non pas \u00e0 l'instruction suivante, mais \u00e0 ALLER \u00e0 une certaine case m\u00e9moire. La plus simple est : 5xx : ALLER ex\u00e9cuter l'instruction situ\u00e9e dans la case m\u00e9moire xx. Boucle infinie Pour ex\u00e9cuter une boucle infinie, on dit \u00e0 VIC d'aller ex\u00e9cuter l'instruction de la case 01. Cette instruction lui dit d'aller \u00e0 la case 00. ALLER \u00e0 la case 01 ALLER \u00e0 la case 00 en langage machine : 501 500 Vous verrez le compteur ordinal ( Program Counter ) alterner entre 0 et 1. Pour arr\u00eater VIC , appuyez sur le bouton en forme de carr\u00e9. Pour faire des tests, VIC poss\u00e8de deux autres instructions de contr\u00f4le de flux : 6xx : ALLER_Z\u00c9RO qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient la valeur 0. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. 7xx : ALLER_POS qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient une valeur strictement positive. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. Liste de nombres positifs On voudrait afficher une liste de nombres positifs donn\u00e9s en entr\u00e9e. Il va donc falloir LIRE, puis ALLER \u00e0 une cellule indiquant d'\u00e9crire et de revenir au d\u00e9but du programme si le nombre lu est positif. Si le nombre n'est pas positif, on passe \u00e0 la cellule suivante qui arr\u00eate le programme. En assembleur : LIRE ALLER_POS \u00e0 03 STOP \u00c9CRIRE ALLER \u00e0 0 en langage machine : 800 703 000 900 500","title":"Comment utiliser VIC"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#comment-utiliser-vic","text":"VIC (Visual Computer) est un ordinateur minimal utilisable en ligne pour simuler le langage machine . Il comporte tr\u00e8s peu de composants et ne comprend qu'un nombre tr\u00e8s r\u00e9duit d'instructions. Cette simplification permet de comprendre le mod\u00e8le de von Neumann et les bases du langage machine . Dans VIC , toutes les donn\u00e9es sont des nombres entiers \u00e0 trois chiffres (de -999 \u00e0 999).","title":"Comment utiliser VIC"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#architecture","text":"L'interface de VIC est compos\u00e9e de trois parties, elles-m\u00eames partag\u00e9es en plusieurs composants : les composants d'entr\u00e9e/sortie ( I/O Units ), avec : un composant d'entr\u00e9e ( Input ) dans lequel vous pourrez \u00e9crire des nombres pour tester vos programmes ; un composant de sortie ( Output ) dans lequel le programme peut \u00e9crire un nombre; un processeur ( CPU ), compos\u00e9 de : un registre d'instruction ( Instruction Register ) dans lequel est indiqu\u00e9e la prochaine instruction \u00e0 ex\u00e9cuter ; un registre de donn\u00e9es ( Data Register ) qui contient la donn\u00e9e \u00e0 traiter (VIC ne peut traiter qu'une donn\u00e9e \u00e0 la fois) ; un compteur ordinal ( Program Counter ) qui contient l'adresse en m\u00e9moire de l'instruction \u00e0 ex\u00e9cuter. une m\u00e9moire vive ( Memory ) compos\u00e9e de 100 cases m\u00e9moire ou cellules num\u00e9rot\u00e9es de 00 \u00e0 99.","title":"Architecture"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#instructions","text":"Comme les \"vrais\" ordinateurs, VIC ne conna\u00eet qu'un petit nombre d'instructions. Elles sont au nombre de dix. VIC commence son ex\u00e9cution avec l'instructions situ\u00e9e dans la case m\u00e9moire d'adresse 00. \u00c0 chaque \u00e9tape, il ex\u00e9cute l'instruction situ\u00e9e dans la case m\u00e9moire courante puis passe \u00e0 la suvante. Le programme s'arr\u00eate lorsqu'il rencontre une case m\u00e9moire vide ou, ce qui revient au m\u00eame, qui contient le nombre 0. Nous avons donc notre premi\u00e8re instruction en langage machine : 000 : STOP arr\u00eater le programme.","title":"Instructions"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#le-langage-machine","text":"Le langage machine est le langage compris par la machine au niveau des composants. Il s'exprime \u00e0 l'aide de nombres entiers. Pour faciliter le travail des humains, on utilse un langage appel\u00e9 assembleur qui consiste \u00e0 remplacer chaque nombre par une expression plus lisible.","title":"Le langage machine"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#entree-sortie","text":"VIC comprend deux instructions d'entr\u00e9e-sortie : 800 : LIRE la case courante de Input et mettre sa valeur dans le registre de donn\u00e9es 900 : \u00c9CRIRE la valeur du registre de donn\u00e9es dans la case suivante de Output Premier exemple : lire et afficher Un programme qui lit une donn\u00e9e puis l'\u00e9crit dans Ouput . Ce programme s'\u00e9crirait ainsi en assembleur : LIRE \u00c9CRIRE STOP ce qui donne, en langage machine de VIC : 800 900 000 Essayez ! Si vous \u00e9crivez n'importe quel nombre dans la premi\u00e8ce cellule de Input , ce programme va l'\u00e9crire dans Ouput . Pour que cela fonction, il faut \u00e9crire 800 dans la case m\u00e9moire d'adresse 00 et 900 dans celle d'adresse 01 . Dans la suite, nous ommettrons la ligne 000 STOP pour all\u00e9ger les programmes.","title":"Entr\u00e9e-sortie"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#avec-la-memoire","text":"Deux instructions permettent de travailler avec la m\u00e9moire vive : 3xx : CHARGER le contenu de la case m\u00e9moire dont l'adresse est xx (o\u00f9 xx repr\u00e9sente deux chiffres) dans le registre de donn\u00e9es depuis 4xx : ENREGISTRER le contenu du registre de donn\u00e9es dans la case m\u00e9moire dont l'adresse est xx. Affichage inverse On veut lire deux nombres, puis les afficher dans l'ordre inverse : d'abord le deuxi\u00e8me nombre entr\u00e9, puis le premier. Pour cela, il faut garder le premier nombre en m\u00e9moire, par exemple dans la case 10. En assembleur : LIRE ENREGISTRER dans la case m\u00e9moire 10 LIRE \u00c9CRIRE CHARGER le nombre de la case m\u00e9more 10 \u00c9CRIRE en langage machine de VIC : 800 410 800 900 310 900","title":"Avec la m\u00e9moire"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#arithmetique","text":"VIC ne conna\u00eet que deux op\u00e9rations : addition et soustraction. \u00c0 chaque fois, il travaille avec une case m\u00e9moire d'adresse xx et le registre de donn\u00e9es. 1xx : AJOUTER le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es ; 2xx : SOUSTRAIRE le nombre stock\u00e9 dans la case m\u00e9moire d'adresse xx au registre de donn\u00e9es. Attention L'ordre des nombres pour la soustraction est important. Addition Pour additionner deux nombres donn\u00e9s en entr\u00e9e, il faudra en enregistrer un en m\u00e9moire, par exemple dans la case 09. LIRE (le premier nombre) ENREGISTRER dans la case m\u00e9moire 09 LIRE (le deuxi\u00e8me) AJOUTER le nombre de la case 09 au registre de donn\u00e9es \u00c9CRIRE en langage machine : 800 409 800 109 900","title":"Arithm\u00e9tique"},{"location":"1NSI/02ArchitectureOrdinateur/02ExplicationsVIC/#controle-du-flux","text":"Toutes les instructions conditionnelles et les boucles se font en langage machine avec des instructions de contr\u00f4le de flux qui consistent \u00e0 passer, non pas \u00e0 l'instruction suivante, mais \u00e0 ALLER \u00e0 une certaine case m\u00e9moire. La plus simple est : 5xx : ALLER ex\u00e9cuter l'instruction situ\u00e9e dans la case m\u00e9moire xx. Boucle infinie Pour ex\u00e9cuter une boucle infinie, on dit \u00e0 VIC d'aller ex\u00e9cuter l'instruction de la case 01. Cette instruction lui dit d'aller \u00e0 la case 00. ALLER \u00e0 la case 01 ALLER \u00e0 la case 00 en langage machine : 501 500 Vous verrez le compteur ordinal ( Program Counter ) alterner entre 0 et 1. Pour arr\u00eater VIC , appuyez sur le bouton en forme de carr\u00e9. Pour faire des tests, VIC poss\u00e8de deux autres instructions de contr\u00f4le de flux : 6xx : ALLER_Z\u00c9RO qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient la valeur 0. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. 7xx : ALLER_POS qui envoie \u00e0 la case m\u00e9moire xx si le registre de donn\u00e9es contient une valeur strictement positive. Dans les autres cas, VIC passe \u00e0 la case m\u00e9moire suivante comme d'habitude. Liste de nombres positifs On voudrait afficher une liste de nombres positifs donn\u00e9s en entr\u00e9e. Il va donc falloir LIRE, puis ALLER \u00e0 une cellule indiquant d'\u00e9crire et de revenir au d\u00e9but du programme si le nombre lu est positif. Si le nombre n'est pas positif, on passe \u00e0 la cellule suivante qui arr\u00eate le programme. En assembleur : LIRE ALLER_POS \u00e0 03 STOP \u00c9CRIRE ALLER \u00e0 0 en langage machine : 800 703 000 900 500","title":"Contr\u00f4le du flux"},{"location":"1NSI/03ProgrammerFonction/","text":"03. Programmer une fonction \u2693\ufe0e (bient\u00f4t)","title":"03. Programmer une fonction"},{"location":"1NSI/03ProgrammerFonction/#03-programmer-une-fonction","text":"(bient\u00f4t)","title":"03. Programmer une fonction"},{"location":"1NSI/04NombresEntiersNaturels/","text":"04. Nombres entiers naturels \u2693\ufe0e (bient\u00f4t)","title":"04. Nombres entiers naturels"},{"location":"1NSI/04NombresEntiersNaturels/#04-nombres-entiers-naturels","text":"(bient\u00f4t)","title":"04. Nombres entiers naturels"},{"location":"1NSI/05Bool%C3%A9ensOp%C3%A9rateursLogiques/","text":"05. Bool\u00e9ens et op\u00e9rateurs logiques \u2693\ufe0e (bient\u00f4t)","title":"05. Bool\u00e9ens et op\u00e9rateurs logiques"},{"location":"1NSI/05Bool%C3%A9ensOp%C3%A9rateursLogiques/#05-booleens-et-operateurs-logiques","text":"(bient\u00f4t)","title":"05. Bool\u00e9ens et op\u00e9rateurs logiques"},{"location":"1NSI/06Textes/","text":"06. Textes \u2693\ufe0e (bient\u00f4t)","title":"06. Textes"},{"location":"1NSI/06Textes/#06-textes","text":"(bient\u00f4t)","title":"06. Textes"},{"location":"1NSI/07Syst%C3%A8mesExploitation/","text":"07. Syst\u00e8mes d'exploitation et commandes UNIX \u2693\ufe0e (bient\u00f4t)","title":"07. Syst\u00e8mes d'exploitation et commandes UNIX"},{"location":"1NSI/07Syst%C3%A8mesExploitation/#07-systemes-dexploitation-et-commandes-unix","text":"(bient\u00f4t)","title":"07. Syst\u00e8mes d'exploitation et commandes UNIX"},{"location":"1NSI/08Listes/","text":"08. Listes \u2693\ufe0e (bient\u00f4t)","title":"08. Listes"},{"location":"1NSI/08Listes/#08-listes","text":"(bient\u00f4t)","title":"08. Listes"},{"location":"1NSI/09NombresEntiersRelatifs/","text":"09. Nombres entiers relatifs \u2693\ufe0e (bient\u00f4t)","title":"09. Nombres entiers relatifs"},{"location":"1NSI/09NombresEntiersRelatifs/#09-nombres-entiers-relatifs","text":"(bient\u00f4t)","title":"09. Nombres entiers relatifs"},{"location":"1NSI/10Dictionnaires/","text":"10. Dictionnaires \u2693\ufe0e (bient\u00f4t)","title":"10. Dictionnaires"},{"location":"1NSI/10Dictionnaires/#10-dictionnaires","text":"(bient\u00f4t)","title":"10. Dictionnaires"},{"location":"1NSI/11R%C3%A9seaux/","text":"11. R\u00e9seaux \u2693\ufe0e (bient\u00f4t)","title":"11. R\u00e9seaux"},{"location":"1NSI/11R%C3%A9seaux/#11-reseaux","text":"(bient\u00f4t)","title":"11. R\u00e9seaux"},{"location":"1NSI/12Matrices/","text":"12. Matrices \u2693\ufe0e (bient\u00f4t)","title":"12. Matrices"},{"location":"1NSI/12Matrices/#12-matrices","text":"(bient\u00f4t)","title":"12. Matrices"},{"location":"1NSI/13RechercheDansTableau/","text":"13. Rechercher dans un tableau \u2693\ufe0e (bient\u00f4t)","title":"13. Rechercher dans un tableau"},{"location":"1NSI/13RechercheDansTableau/#13-rechercher-dans-un-tableau","text":"(bient\u00f4t)","title":"13. Rechercher dans un tableau"},{"location":"1NSI/14NombresFlottants/","text":"14. Nombres flottants \u2693\ufe0e (bient\u00f4t)","title":"14. Nombres flottants"},{"location":"1NSI/14NombresFlottants/#14-nombres-flottants","text":"(bient\u00f4t)","title":"14. Nombres flottants"},{"location":"1NSI/15AlgorithmesTri/","text":"15. Algorithmes de tri \u2693\ufe0e (bient\u00f4t)","title":"15. Algorithmes de tri"},{"location":"1NSI/15AlgorithmesTri/#15-algorithmes-de-tri","text":"(bient\u00f4t)","title":"15. Algorithmes de tri"},{"location":"1NSI/16Donn%C3%A9esTables/","text":"16. Donn\u00e9es en tables \u2693\ufe0e (bient\u00f4t)","title":"16. Donn\u00e9es en tables"},{"location":"1NSI/16Donn%C3%A9esTables/#16-donnees-en-tables","text":"(bient\u00f4t)","title":"16. Donn\u00e9es en tables"},{"location":"1NSI/17AlgorithmesGloutons/","text":"17. Algorithmes gloutons \u2693\ufe0e (bient\u00f4t)","title":"17. Algorithmes gloutons"},{"location":"1NSI/17AlgorithmesGloutons/#17-algorithmes-gloutons","text":"(bient\u00f4t)","title":"17. Algorithmes gloutons"},{"location":"1NSI/18KNN/","text":"18. Algorithme des k plus proches voisins \u2693\ufe0e (bient\u00f4t)","title":"18. Algorithme des k plus proches voisins"},{"location":"1NSI/18KNN/#18-algorithme-des-k-plus-proches-voisins","text":"(bient\u00f4t)","title":"18. Algorithme des k plus proches voisins"},{"location":"1NSI/19IHMWeb/","text":"19. Interface homme-machine sur le Web \u2693\ufe0e (bient\u00f4t)","title":"19. Interface homme-machine sur le Web"},{"location":"1NSI/19IHMWeb/#19-interface-homme-machine-sur-le-web","text":"(bient\u00f4t)","title":"19. Interface homme-machine sur le Web"},{"location":"TNSI/","text":"Terminale NSI \u2693\ufe0e bient\u00f4t","title":"TNSI"},{"location":"TNSI/#terminale-nsi","text":"bient\u00f4t","title":"Terminale NSI"},{"location":"euro/","text":"Section euro \u2693\ufe0e Documents et activit\u00e9s pour la section europ\u00e9enne math\u00e9matiques en anglais.","title":"Section euro"},{"location":"euro/#section-euro","text":"Documents et activit\u00e9s pour la section europ\u00e9enne math\u00e9matiques en anglais.","title":"Section euro"},{"location":"xtra/end_REM/","text":"Z","title":"end REM"},{"location":"xtra/start_REM/","text":"A","title":"start REM"}]}